<launch>
  <master auto="start"/>
  <arg name="map" value="icra2022"/>

  <!--Load parameters for localization node  -->
  <rosparam command="load" file="$(find roborts_localization)/config/localization.yaml" />
  <rosparam command="load" file="$(find roborts_localization)/amcl/config/amcl.yaml" />
  <rosparam command="load" file="$(find roborts_test)/config/shoot.yaml" />
  <rosparam command="load" file="$(find roborts_bringup)/config/roborts_config.yaml" />
  <rosparam command="load" file="$(find roborts_detection)/armor_detection/yolox_car/config/yolox_car_config.yaml" />

  <!-- Run the robot sdk interface -->
  <include file="$(find roborts_bringup)/launch/base.launch" />

  <!-- Run the map server -->
  <node name="map_server" pkg="map_server" type="map_server" args="$(find roborts_bringup)/maps/$(arg map).yaml" respawn="false" />

  <!-- Publish static tf -->
  <include file="$(find roborts_bringup)/launch/static_tf.launch" />

  <!-- Run the lidar node --> 
  <node name="rplidar_node" pkg="rplidar_ros" type="rplidarNode" output="screen">
      <param name="serial_port" type="string" value="/dev/ttyUSB0"/>
      <param name="serial_baudrate" type="int" value="256000"/>
      <param name="frame_id" type="string" value="base_laser_link"/>
      <param name="inverted" type="bool" value="true"/>
      <param name="angle_compensate" type="bool" value="true"/>
  </node>

  <!-- Run the localization node -->
  <node pkg="roborts_localization" type="localization_node" name="localization_node" respawn="false"/>


  <!-- Run the global planner node -->
  <node pkg="roborts_planning" type="global_planner_node" name="global_planner_node" respawn="false" />

  <!-- Run the local planner node -->
  <node pkg="roborts_planning" type="local_planner_node" name="local_planner_node" respawn="false" output="screen"/>

  <node pkg="roborts_planning" type="global_planner_test" name="global_planner_test" respawn="false" />

  <!-- Run the velocity converter node -->
  <node pkg="roborts_planning" type="vel_converter" name="vel_converter_node" respawn="false" />

  <!-- Run the camera node -->
  <node pkg="roborts_socket" type="client_node" name="client_node" respawn="false" />

  <!-- Run the camera node -->
  <node pkg="roborts_camera" type="roborts_camera_node" name="roborts_camera_node" respawn="false" />

  <!-- Run the detection node -->
  <param name="enable_debug_" value="false"/>
  <node pkg="roborts_detection" type="armor_detection_node" name="armor_detection_node" respawn="false" output="screen" />
  <!--	<param name="enable_debug_" type="bool" value="false"/> -->
  <!--  </node> -->

  <!-- Run the detection client node -->
  <node pkg="roborts_detection" type="armor_detection_client" name="armor_detection_client" respawn="false" output="screen"/>

  <!-- Run the detection node -->
  <node pkg="decision" type="test_decision" name="test_decision" respawn="false" output="screen"/>


  <!-- Run the rviz -->
  <!-- <node name="rviz" pkg="rviz" type="rviz" args="-d $(find roborts_bringup)/rviz/roborts.rviz" /> -->


</launch>

