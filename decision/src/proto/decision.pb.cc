// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decision.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "decision.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RTS_DECISION {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* EscapeConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EscapeConstraint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchConstraint_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShooterModelConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShooterModelConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhirlVel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhirlVel_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiRobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiRobot_reflection_ = NULL;
const ::google::protobuf::Descriptor* CameraGimbalTransform_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CameraGimbalTransform_reflection_ = NULL;
const ::google::protobuf::Descriptor* DetectionShootConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DetectionShootConfig_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecisionConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecisionConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_decision_2eproto() {
  protobuf_AddDesc_decision_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "decision.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, yaw_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
  EscapeConstraint_descriptor_ = file->message_type(1);
  static const int EscapeConstraint_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, left_x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, right_x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, robot_x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, left_random_min_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, left_random_max_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, right_random_min_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, right_random_max_x_),
  };
  EscapeConstraint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EscapeConstraint_descriptor_,
      EscapeConstraint::default_instance_,
      EscapeConstraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EscapeConstraint));
  SearchConstraint_descriptor_ = file->message_type(2);
  static const int SearchConstraint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, y_limit_),
  };
  SearchConstraint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SearchConstraint_descriptor_,
      SearchConstraint::default_instance_,
      SearchConstraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SearchConstraint));
  ShooterModelConfig_descriptor_ = file->message_type(3);
  static const int ShooterModelConfig_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShooterModelConfig, h_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShooterModelConfig, gravity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShooterModelConfig, init_k__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShooterModelConfig, h_adjust_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShooterModelConfig, shoot_speed_),
  };
  ShooterModelConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShooterModelConfig_descriptor_,
      ShooterModelConfig::default_instance_,
      ShooterModelConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShooterModelConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShooterModelConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShooterModelConfig));
  WhirlVel_descriptor_ = file->message_type(4);
  static const int WhirlVel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, angle_x_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, angle_y_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, angle_z_vel_),
  };
  WhirlVel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhirlVel_descriptor_,
      WhirlVel::default_instance_,
      WhirlVel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhirlVel));
  MultiRobot_descriptor_ = file->message_type(5);
  static const int MultiRobot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRobot, start_position_),
  };
  MultiRobot_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MultiRobot_descriptor_,
      MultiRobot::default_instance_,
      MultiRobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRobot, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRobot, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MultiRobot));
  CameraGimbalTransform_descriptor_ = file->message_type(6);
  static const int CameraGimbalTransform_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, offset_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, offset_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, offset_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, offset_pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, offset_yaw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, pinch_param_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, yaw_change_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, pitch_change_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, pid_kp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, pid_ki_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, pid_kd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, pid_max_out_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, pid_max_iout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, offset_y_weight_),
  };
  CameraGimbalTransform_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CameraGimbalTransform_descriptor_,
      CameraGimbalTransform::default_instance_,
      CameraGimbalTransform_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CameraGimbalTransform, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CameraGimbalTransform));
  DetectionShootConfig_descriptor_ = file->message_type(7);
  static const int DetectionShootConfig_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionShootConfig, armor_change_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionShootConfig, detect_lost_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionShootConfig, gimbal_adjust_history_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionShootConfig, armor_detected_history_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionShootConfig, armor_detected_history_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionShootConfig, enemy_detected_history_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionShootConfig, enemy_detected_history_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionShootConfig, enemy_front_pose_history_range_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionShootConfig, enemy_front_pose_history_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionShootConfig, shoot_distance_limit_),
  };
  DetectionShootConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DetectionShootConfig_descriptor_,
      DetectionShootConfig::default_instance_,
      DetectionShootConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionShootConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DetectionShootConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DetectionShootConfig));
  DecisionConfig_descriptor_ = file->message_type(8);
  static const int DecisionConfig_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, simulate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, escape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, buff_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, whirl_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, wing_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, master_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, wing_bot_task_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_region_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_region_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_region_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_region_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, patrol_region_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, shooter_model_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, robot_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, buff_adjust_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, detection_shoot_config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, camera_gimbal_transform_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, use_pid_),
  };
  DecisionConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DecisionConfig_descriptor_,
      DecisionConfig::default_instance_,
      DecisionConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DecisionConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_decision_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EscapeConstraint_descriptor_, &EscapeConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SearchConstraint_descriptor_, &SearchConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShooterModelConfig_descriptor_, &ShooterModelConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhirlVel_descriptor_, &WhirlVel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MultiRobot_descriptor_, &MultiRobot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CameraGimbalTransform_descriptor_, &CameraGimbalTransform::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DetectionShootConfig_descriptor_, &DetectionShootConfig::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DecisionConfig_descriptor_, &DecisionConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_decision_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete EscapeConstraint::default_instance_;
  delete EscapeConstraint_reflection_;
  delete SearchConstraint::default_instance_;
  delete SearchConstraint_reflection_;
  delete ShooterModelConfig::default_instance_;
  delete ShooterModelConfig_reflection_;
  delete WhirlVel::default_instance_;
  delete WhirlVel_reflection_;
  delete MultiRobot::default_instance_;
  delete MultiRobot_reflection_;
  delete CameraGimbalTransform::default_instance_;
  delete CameraGimbalTransform_reflection_;
  delete DetectionShootConfig::default_instance_;
  delete DetectionShootConfig_reflection_;
  delete DecisionConfig::default_instance_;
  delete DecisionConfig_reflection_;
}

void protobuf_AddDesc_decision_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016decision.proto\022\014RTS_DECISION\"R\n\005Point\022"
    "\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\014\n\004roll"
    "\030\004 \001(\002\022\r\n\005pitch\030\005 \001(\002\022\013\n\003yaw\030\006 \001(\002\"\304\001\n\020E"
    "scapeConstraint\022\024\n\014left_x_limit\030\001 \001(\002\022\025\n"
    "\rright_x_limit\030\002 \001(\002\022\025\n\rrobot_x_limit\030\003 "
    "\001(\002\022\031\n\021left_random_min_x\030\004 \001(\002\022\031\n\021left_r"
    "andom_max_x\030\005 \001(\002\022\032\n\022right_random_min_x\030"
    "\006 \001(\002\022\032\n\022right_random_max_x\030\007 \001(\002\"4\n\020Sea"
    "rchConstraint\022\017\n\007x_limit\030\001 \001(\002\022\017\n\007y_limi"
    "t\030\002 \001(\002\"h\n\022ShooterModelConfig\022\t\n\001h\030\001 \001(\002"
    "\022\017\n\007GRAVITY\030\002 \001(\002\022\017\n\007init_k_\030\003 \001(\002\022\020\n\010h_"
    "adjust\030\004 \001(\002\022\023\n\013shoot_speed\030\005 \001(\002\"I\n\010Whi"
    "rlVel\022\023\n\013angle_x_vel\030\001 \001(\002\022\023\n\013angle_y_ve"
    "l\030\002 \001(\002\022\023\n\013angle_z_vel\030\003 \001(\002\"9\n\nMultiRob"
    "ot\022+\n\016start_position\030\007 \001(\0132\023.RTS_DECISIO"
    "N.Point\"\276\002\n\025CameraGimbalTransform\022\020\n\010off"
    "set_x\030\001 \002(\002\022\020\n\010offset_y\030\002 \002(\002\022\020\n\010offset_"
    "z\030\003 \002(\002\022\024\n\014offset_pitch\030\004 \002(\002\022\022\n\noffset_"
    "yaw\030\005 \002(\002\022\023\n\013pinch_param\030\006 \001(\002\022\034\n\024yaw_ch"
    "ange_threshold\030\007 \002(\002\022\036\n\026pitch_change_thr"
    "eshold\030\010 \002(\002\022\016\n\006pid_kp\030\t \001(\002\022\016\n\006pid_ki\030\n"
    " \001(\002\022\016\n\006pid_kd\030\013 \001(\002\022\023\n\013pid_max_out\030\014 \001("
    "\002\022\024\n\014pid_max_iout\030\r \001(\002\022\027\n\017offset_y_weig"
    "ht\030\016 \002(\002\"\210\003\n\024DetectionShootConfig\022\036\n\026arm"
    "or_change_threshold\030\001 \001(\002\022\031\n\021detect_lost"
    "_limit\030\002 \001(\005\022#\n\033gimbal_adjust_history_ra"
    "nge\030\003 \001(\005\022$\n\034armor_detected_history_rang"
    "e\030\004 \001(\005\022(\n armor_detected_history_thresh"
    "old\030\005 \001(\005\022$\n\034enemy_detected_history_rang"
    "e\030\006 \001(\005\022(\n enemy_detected_history_thresh"
    "old\030\007 \001(\005\022&\n\036enemy_front_pose_history_ra"
    "nge\030\010 \001(\005\022*\n\"enemy_front_pose_history_th"
    "reshold\030\t \001(\005\022\034\n\024shoot_distance_limit\030\n "
    "\002(\002\"\253\007\n\016DecisionConfig\022\"\n\005point\030\001 \003(\0132\023."
    "RTS_DECISION.Point\022\027\n\010simulate\030\002 \001(\010:\005fa"
    "lse\022\025\n\006master\030\003 \001(\010:\005false\022.\n\006escape\030\004 \001"
    "(\0132\036.RTS_DECISION.EscapeConstraint\022\'\n\nbu"
    "ff_point\030\005 \003(\0132\023.RTS_DECISION.Point\0224\n\014s"
    "earch_limit\030\006 \001(\0132\036.RTS_DECISION.SearchC"
    "onstraint\022)\n\twhirl_vel\030\007 \001(\0132\026.RTS_DECIS"
    "ION.WhirlVel\022*\n\010wing_bot\030\010 \001(\0132\030.RTS_DEC"
    "ISION.MultiRobot\022,\n\nmaster_bot\030\t \001(\0132\030.R"
    "TS_DECISION.MultiRobot\0220\n\023wing_bot_task_"
    "point\030\n \001(\0132\023.RTS_DECISION.Point\022,\n\017sear"
    "ch_region_1\030\013 \003(\0132\023.RTS_DECISION.Point\022,"
    "\n\017search_region_2\030\014 \003(\0132\023.RTS_DECISION.P"
    "oint\022,\n\017search_region_3\030\r \003(\0132\023.RTS_DECI"
    "SION.Point\022,\n\017search_region_4\030\016 \003(\0132\023.RT"
    "S_DECISION.Point\022*\n\rpatrol_region\030\017 \003(\0132"
    "\023.RTS_DECISION.Point\022>\n\024shooter_model_co"
    "nfig\030\020 \001(\0132 .RTS_DECISION.ShooterModelCo"
    "nfig\022\020\n\010robot_id\030\021 \001(\005\022.\n\021buff_adjust_po"
    "int\030\022 \003(\0132\023.RTS_DECISION.Point\022B\n\026detect"
    "ion_shoot_config\030\023 \001(\0132\".RTS_DECISION.De"
    "tectionShootConfig\022D\n\027camera_gimbal_tran"
    "sform\030\024 \001(\0132#.RTS_DECISION.CameraGimbalT"
    "ransform\022\017\n\007use_pid\030\025 \001(\010", 2265);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "decision.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  EscapeConstraint::default_instance_ = new EscapeConstraint();
  SearchConstraint::default_instance_ = new SearchConstraint();
  ShooterModelConfig::default_instance_ = new ShooterModelConfig();
  WhirlVel::default_instance_ = new WhirlVel();
  MultiRobot::default_instance_ = new MultiRobot();
  CameraGimbalTransform::default_instance_ = new CameraGimbalTransform();
  DetectionShootConfig::default_instance_ = new DetectionShootConfig();
  DecisionConfig::default_instance_ = new DecisionConfig();
  Point::default_instance_->InitAsDefaultInstance();
  EscapeConstraint::default_instance_->InitAsDefaultInstance();
  SearchConstraint::default_instance_->InitAsDefaultInstance();
  ShooterModelConfig::default_instance_->InitAsDefaultInstance();
  WhirlVel::default_instance_->InitAsDefaultInstance();
  MultiRobot::default_instance_->InitAsDefaultInstance();
  CameraGimbalTransform::default_instance_->InitAsDefaultInstance();
  DetectionShootConfig::default_instance_->InitAsDefaultInstance();
  DecisionConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_decision_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_decision_2eproto {
  StaticDescriptorInitializer_decision_2eproto() {
    protobuf_AddDesc_decision_2eproto();
  }
} static_descriptor_initializer_decision_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
const int Point::kRollFieldNumber;
const int Point::kPitchFieldNumber;
const int Point::kYawFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTS_DECISION.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RTS_DECISION.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  roll_ = 0;
  pitch_ = 0;
  yaw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:RTS_DECISION.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(x_, yaw_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTS_DECISION.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_roll;
        break;
      }

      // optional float roll = 4;
      case 4: {
        if (tag == 37) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_pitch;
        break;
      }

      // optional float pitch = 5;
      case 5: {
        if (tag == 45) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_yaw;
        break;
      }

      // optional float yaw = 6;
      case 6: {
        if (tag == 53) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTS_DECISION.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTS_DECISION.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTS_DECISION.Point)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float roll = 4;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->roll(), output);
  }

  // optional float pitch = 5;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pitch(), output);
  }

  // optional float yaw = 6;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yaw(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RTS_DECISION.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTS_DECISION.Point)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float roll = 4;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->roll(), target);
  }

  // optional float pitch = 5;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pitch(), target);
  }

  // optional float yaw = 6;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->yaw(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTS_DECISION.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float roll = 4;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // optional float pitch = 5;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // optional float yaw = 6;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(roll_, other->roll_);
    std::swap(pitch_, other->pitch_);
    std::swap(yaw_, other->yaw_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EscapeConstraint::kLeftXLimitFieldNumber;
const int EscapeConstraint::kRightXLimitFieldNumber;
const int EscapeConstraint::kRobotXLimitFieldNumber;
const int EscapeConstraint::kLeftRandomMinXFieldNumber;
const int EscapeConstraint::kLeftRandomMaxXFieldNumber;
const int EscapeConstraint::kRightRandomMinXFieldNumber;
const int EscapeConstraint::kRightRandomMaxXFieldNumber;
#endif  // !_MSC_VER

EscapeConstraint::EscapeConstraint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTS_DECISION.EscapeConstraint)
}

void EscapeConstraint::InitAsDefaultInstance() {
}

EscapeConstraint::EscapeConstraint(const EscapeConstraint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RTS_DECISION.EscapeConstraint)
}

void EscapeConstraint::SharedCtor() {
  _cached_size_ = 0;
  left_x_limit_ = 0;
  right_x_limit_ = 0;
  robot_x_limit_ = 0;
  left_random_min_x_ = 0;
  left_random_max_x_ = 0;
  right_random_min_x_ = 0;
  right_random_max_x_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EscapeConstraint::~EscapeConstraint() {
  // @@protoc_insertion_point(destructor:RTS_DECISION.EscapeConstraint)
  SharedDtor();
}

void EscapeConstraint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EscapeConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EscapeConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EscapeConstraint_descriptor_;
}

const EscapeConstraint& EscapeConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

EscapeConstraint* EscapeConstraint::default_instance_ = NULL;

EscapeConstraint* EscapeConstraint::New() const {
  return new EscapeConstraint;
}

void EscapeConstraint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<EscapeConstraint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(left_x_limit_, right_random_max_x_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EscapeConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTS_DECISION.EscapeConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float left_x_limit = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_x_limit_)));
          set_has_left_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_right_x_limit;
        break;
      }

      // optional float right_x_limit = 2;
      case 2: {
        if (tag == 21) {
         parse_right_x_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_x_limit_)));
          set_has_right_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_robot_x_limit;
        break;
      }

      // optional float robot_x_limit = 3;
      case 3: {
        if (tag == 29) {
         parse_robot_x_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &robot_x_limit_)));
          set_has_robot_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_left_random_min_x;
        break;
      }

      // optional float left_random_min_x = 4;
      case 4: {
        if (tag == 37) {
         parse_left_random_min_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_random_min_x_)));
          set_has_left_random_min_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_left_random_max_x;
        break;
      }

      // optional float left_random_max_x = 5;
      case 5: {
        if (tag == 45) {
         parse_left_random_max_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_random_max_x_)));
          set_has_left_random_max_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_right_random_min_x;
        break;
      }

      // optional float right_random_min_x = 6;
      case 6: {
        if (tag == 53) {
         parse_right_random_min_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_random_min_x_)));
          set_has_right_random_min_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_right_random_max_x;
        break;
      }

      // optional float right_random_max_x = 7;
      case 7: {
        if (tag == 61) {
         parse_right_random_max_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_random_max_x_)));
          set_has_right_random_max_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTS_DECISION.EscapeConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTS_DECISION.EscapeConstraint)
  return false;
#undef DO_
}

void EscapeConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTS_DECISION.EscapeConstraint)
  // optional float left_x_limit = 1;
  if (has_left_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left_x_limit(), output);
  }

  // optional float right_x_limit = 2;
  if (has_right_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->right_x_limit(), output);
  }

  // optional float robot_x_limit = 3;
  if (has_robot_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->robot_x_limit(), output);
  }

  // optional float left_random_min_x = 4;
  if (has_left_random_min_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->left_random_min_x(), output);
  }

  // optional float left_random_max_x = 5;
  if (has_left_random_max_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->left_random_max_x(), output);
  }

  // optional float right_random_min_x = 6;
  if (has_right_random_min_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->right_random_min_x(), output);
  }

  // optional float right_random_max_x = 7;
  if (has_right_random_max_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->right_random_max_x(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RTS_DECISION.EscapeConstraint)
}

::google::protobuf::uint8* EscapeConstraint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTS_DECISION.EscapeConstraint)
  // optional float left_x_limit = 1;
  if (has_left_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left_x_limit(), target);
  }

  // optional float right_x_limit = 2;
  if (has_right_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->right_x_limit(), target);
  }

  // optional float robot_x_limit = 3;
  if (has_robot_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->robot_x_limit(), target);
  }

  // optional float left_random_min_x = 4;
  if (has_left_random_min_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->left_random_min_x(), target);
  }

  // optional float left_random_max_x = 5;
  if (has_left_random_max_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->left_random_max_x(), target);
  }

  // optional float right_random_min_x = 6;
  if (has_right_random_min_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->right_random_min_x(), target);
  }

  // optional float right_random_max_x = 7;
  if (has_right_random_max_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->right_random_max_x(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTS_DECISION.EscapeConstraint)
  return target;
}

int EscapeConstraint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float left_x_limit = 1;
    if (has_left_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float right_x_limit = 2;
    if (has_right_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float robot_x_limit = 3;
    if (has_robot_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float left_random_min_x = 4;
    if (has_left_random_min_x()) {
      total_size += 1 + 4;
    }

    // optional float left_random_max_x = 5;
    if (has_left_random_max_x()) {
      total_size += 1 + 4;
    }

    // optional float right_random_min_x = 6;
    if (has_right_random_min_x()) {
      total_size += 1 + 4;
    }

    // optional float right_random_max_x = 7;
    if (has_right_random_max_x()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EscapeConstraint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EscapeConstraint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EscapeConstraint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EscapeConstraint::MergeFrom(const EscapeConstraint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_x_limit()) {
      set_left_x_limit(from.left_x_limit());
    }
    if (from.has_right_x_limit()) {
      set_right_x_limit(from.right_x_limit());
    }
    if (from.has_robot_x_limit()) {
      set_robot_x_limit(from.robot_x_limit());
    }
    if (from.has_left_random_min_x()) {
      set_left_random_min_x(from.left_random_min_x());
    }
    if (from.has_left_random_max_x()) {
      set_left_random_max_x(from.left_random_max_x());
    }
    if (from.has_right_random_min_x()) {
      set_right_random_min_x(from.right_random_min_x());
    }
    if (from.has_right_random_max_x()) {
      set_right_random_max_x(from.right_random_max_x());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EscapeConstraint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscapeConstraint::CopyFrom(const EscapeConstraint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscapeConstraint::IsInitialized() const {

  return true;
}

void EscapeConstraint::Swap(EscapeConstraint* other) {
  if (other != this) {
    std::swap(left_x_limit_, other->left_x_limit_);
    std::swap(right_x_limit_, other->right_x_limit_);
    std::swap(robot_x_limit_, other->robot_x_limit_);
    std::swap(left_random_min_x_, other->left_random_min_x_);
    std::swap(left_random_max_x_, other->left_random_max_x_);
    std::swap(right_random_min_x_, other->right_random_min_x_);
    std::swap(right_random_max_x_, other->right_random_max_x_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EscapeConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EscapeConstraint_descriptor_;
  metadata.reflection = EscapeConstraint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SearchConstraint::kXLimitFieldNumber;
const int SearchConstraint::kYLimitFieldNumber;
#endif  // !_MSC_VER

SearchConstraint::SearchConstraint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTS_DECISION.SearchConstraint)
}

void SearchConstraint::InitAsDefaultInstance() {
}

SearchConstraint::SearchConstraint(const SearchConstraint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RTS_DECISION.SearchConstraint)
}

void SearchConstraint::SharedCtor() {
  _cached_size_ = 0;
  x_limit_ = 0;
  y_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchConstraint::~SearchConstraint() {
  // @@protoc_insertion_point(destructor:RTS_DECISION.SearchConstraint)
  SharedDtor();
}

void SearchConstraint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchConstraint_descriptor_;
}

const SearchConstraint& SearchConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

SearchConstraint* SearchConstraint::default_instance_ = NULL;

SearchConstraint* SearchConstraint::New() const {
  return new SearchConstraint;
}

void SearchConstraint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SearchConstraint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_limit_, y_limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SearchConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTS_DECISION.SearchConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x_limit = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_limit_)));
          set_has_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y_limit;
        break;
      }

      // optional float y_limit = 2;
      case 2: {
        if (tag == 21) {
         parse_y_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_limit_)));
          set_has_y_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTS_DECISION.SearchConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTS_DECISION.SearchConstraint)
  return false;
#undef DO_
}

void SearchConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTS_DECISION.SearchConstraint)
  // optional float x_limit = 1;
  if (has_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_limit(), output);
  }

  // optional float y_limit = 2;
  if (has_y_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RTS_DECISION.SearchConstraint)
}

::google::protobuf::uint8* SearchConstraint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTS_DECISION.SearchConstraint)
  // optional float x_limit = 1;
  if (has_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_limit(), target);
  }

  // optional float y_limit = 2;
  if (has_y_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTS_DECISION.SearchConstraint)
  return target;
}

int SearchConstraint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float x_limit = 1;
    if (has_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float y_limit = 2;
    if (has_y_limit()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchConstraint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SearchConstraint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SearchConstraint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SearchConstraint::MergeFrom(const SearchConstraint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_limit()) {
      set_x_limit(from.x_limit());
    }
    if (from.has_y_limit()) {
      set_y_limit(from.y_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SearchConstraint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchConstraint::CopyFrom(const SearchConstraint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchConstraint::IsInitialized() const {

  return true;
}

void SearchConstraint::Swap(SearchConstraint* other) {
  if (other != this) {
    std::swap(x_limit_, other->x_limit_);
    std::swap(y_limit_, other->y_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SearchConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchConstraint_descriptor_;
  metadata.reflection = SearchConstraint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShooterModelConfig::kHFieldNumber;
const int ShooterModelConfig::kGRAVITYFieldNumber;
const int ShooterModelConfig::kInitKFieldNumber;
const int ShooterModelConfig::kHAdjustFieldNumber;
const int ShooterModelConfig::kShootSpeedFieldNumber;
#endif  // !_MSC_VER

ShooterModelConfig::ShooterModelConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTS_DECISION.ShooterModelConfig)
}

void ShooterModelConfig::InitAsDefaultInstance() {
}

ShooterModelConfig::ShooterModelConfig(const ShooterModelConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RTS_DECISION.ShooterModelConfig)
}

void ShooterModelConfig::SharedCtor() {
  _cached_size_ = 0;
  h_ = 0;
  gravity_ = 0;
  init_k__ = 0;
  h_adjust_ = 0;
  shoot_speed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShooterModelConfig::~ShooterModelConfig() {
  // @@protoc_insertion_point(destructor:RTS_DECISION.ShooterModelConfig)
  SharedDtor();
}

void ShooterModelConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShooterModelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShooterModelConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShooterModelConfig_descriptor_;
}

const ShooterModelConfig& ShooterModelConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

ShooterModelConfig* ShooterModelConfig::default_instance_ = NULL;

ShooterModelConfig* ShooterModelConfig::New() const {
  return new ShooterModelConfig;
}

void ShooterModelConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShooterModelConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(h_, shoot_speed_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShooterModelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTS_DECISION.ShooterModelConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float h = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_)));
          set_has_h();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_GRAVITY;
        break;
      }

      // optional float GRAVITY = 2;
      case 2: {
        if (tag == 21) {
         parse_GRAVITY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gravity_)));
          set_has_gravity();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_init_k_;
        break;
      }

      // optional float init_k_ = 3;
      case 3: {
        if (tag == 29) {
         parse_init_k_:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &init_k__)));
          set_has_init_k_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_h_adjust;
        break;
      }

      // optional float h_adjust = 4;
      case 4: {
        if (tag == 37) {
         parse_h_adjust:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &h_adjust_)));
          set_has_h_adjust();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_shoot_speed;
        break;
      }

      // optional float shoot_speed = 5;
      case 5: {
        if (tag == 45) {
         parse_shoot_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shoot_speed_)));
          set_has_shoot_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTS_DECISION.ShooterModelConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTS_DECISION.ShooterModelConfig)
  return false;
#undef DO_
}

void ShooterModelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTS_DECISION.ShooterModelConfig)
  // optional float h = 1;
  if (has_h()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->h(), output);
  }

  // optional float GRAVITY = 2;
  if (has_gravity()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->gravity(), output);
  }

  // optional float init_k_ = 3;
  if (has_init_k_()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->init_k_(), output);
  }

  // optional float h_adjust = 4;
  if (has_h_adjust()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->h_adjust(), output);
  }

  // optional float shoot_speed = 5;
  if (has_shoot_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->shoot_speed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RTS_DECISION.ShooterModelConfig)
}

::google::protobuf::uint8* ShooterModelConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTS_DECISION.ShooterModelConfig)
  // optional float h = 1;
  if (has_h()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->h(), target);
  }

  // optional float GRAVITY = 2;
  if (has_gravity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->gravity(), target);
  }

  // optional float init_k_ = 3;
  if (has_init_k_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->init_k_(), target);
  }

  // optional float h_adjust = 4;
  if (has_h_adjust()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->h_adjust(), target);
  }

  // optional float shoot_speed = 5;
  if (has_shoot_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->shoot_speed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTS_DECISION.ShooterModelConfig)
  return target;
}

int ShooterModelConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float h = 1;
    if (has_h()) {
      total_size += 1 + 4;
    }

    // optional float GRAVITY = 2;
    if (has_gravity()) {
      total_size += 1 + 4;
    }

    // optional float init_k_ = 3;
    if (has_init_k_()) {
      total_size += 1 + 4;
    }

    // optional float h_adjust = 4;
    if (has_h_adjust()) {
      total_size += 1 + 4;
    }

    // optional float shoot_speed = 5;
    if (has_shoot_speed()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShooterModelConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShooterModelConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShooterModelConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShooterModelConfig::MergeFrom(const ShooterModelConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_h()) {
      set_h(from.h());
    }
    if (from.has_gravity()) {
      set_gravity(from.gravity());
    }
    if (from.has_init_k_()) {
      set_init_k_(from.init_k_());
    }
    if (from.has_h_adjust()) {
      set_h_adjust(from.h_adjust());
    }
    if (from.has_shoot_speed()) {
      set_shoot_speed(from.shoot_speed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShooterModelConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShooterModelConfig::CopyFrom(const ShooterModelConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShooterModelConfig::IsInitialized() const {

  return true;
}

void ShooterModelConfig::Swap(ShooterModelConfig* other) {
  if (other != this) {
    std::swap(h_, other->h_);
    std::swap(gravity_, other->gravity_);
    std::swap(init_k__, other->init_k__);
    std::swap(h_adjust_, other->h_adjust_);
    std::swap(shoot_speed_, other->shoot_speed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShooterModelConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShooterModelConfig_descriptor_;
  metadata.reflection = ShooterModelConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WhirlVel::kAngleXVelFieldNumber;
const int WhirlVel::kAngleYVelFieldNumber;
const int WhirlVel::kAngleZVelFieldNumber;
#endif  // !_MSC_VER

WhirlVel::WhirlVel()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTS_DECISION.WhirlVel)
}

void WhirlVel::InitAsDefaultInstance() {
}

WhirlVel::WhirlVel(const WhirlVel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RTS_DECISION.WhirlVel)
}

void WhirlVel::SharedCtor() {
  _cached_size_ = 0;
  angle_x_vel_ = 0;
  angle_y_vel_ = 0;
  angle_z_vel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhirlVel::~WhirlVel() {
  // @@protoc_insertion_point(destructor:RTS_DECISION.WhirlVel)
  SharedDtor();
}

void WhirlVel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WhirlVel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhirlVel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhirlVel_descriptor_;
}

const WhirlVel& WhirlVel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

WhirlVel* WhirlVel::default_instance_ = NULL;

WhirlVel* WhirlVel::New() const {
  return new WhirlVel;
}

void WhirlVel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WhirlVel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(angle_x_vel_, angle_z_vel_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhirlVel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTS_DECISION.WhirlVel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float angle_x_vel = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_x_vel_)));
          set_has_angle_x_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_angle_y_vel;
        break;
      }

      // optional float angle_y_vel = 2;
      case 2: {
        if (tag == 21) {
         parse_angle_y_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_y_vel_)));
          set_has_angle_y_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_angle_z_vel;
        break;
      }

      // optional float angle_z_vel = 3;
      case 3: {
        if (tag == 29) {
         parse_angle_z_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_z_vel_)));
          set_has_angle_z_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTS_DECISION.WhirlVel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTS_DECISION.WhirlVel)
  return false;
#undef DO_
}

void WhirlVel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTS_DECISION.WhirlVel)
  // optional float angle_x_vel = 1;
  if (has_angle_x_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->angle_x_vel(), output);
  }

  // optional float angle_y_vel = 2;
  if (has_angle_y_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle_y_vel(), output);
  }

  // optional float angle_z_vel = 3;
  if (has_angle_z_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle_z_vel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RTS_DECISION.WhirlVel)
}

::google::protobuf::uint8* WhirlVel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTS_DECISION.WhirlVel)
  // optional float angle_x_vel = 1;
  if (has_angle_x_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->angle_x_vel(), target);
  }

  // optional float angle_y_vel = 2;
  if (has_angle_y_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle_y_vel(), target);
  }

  // optional float angle_z_vel = 3;
  if (has_angle_z_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle_z_vel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTS_DECISION.WhirlVel)
  return target;
}

int WhirlVel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float angle_x_vel = 1;
    if (has_angle_x_vel()) {
      total_size += 1 + 4;
    }

    // optional float angle_y_vel = 2;
    if (has_angle_y_vel()) {
      total_size += 1 + 4;
    }

    // optional float angle_z_vel = 3;
    if (has_angle_z_vel()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhirlVel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhirlVel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhirlVel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhirlVel::MergeFrom(const WhirlVel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle_x_vel()) {
      set_angle_x_vel(from.angle_x_vel());
    }
    if (from.has_angle_y_vel()) {
      set_angle_y_vel(from.angle_y_vel());
    }
    if (from.has_angle_z_vel()) {
      set_angle_z_vel(from.angle_z_vel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhirlVel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhirlVel::CopyFrom(const WhirlVel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhirlVel::IsInitialized() const {

  return true;
}

void WhirlVel::Swap(WhirlVel* other) {
  if (other != this) {
    std::swap(angle_x_vel_, other->angle_x_vel_);
    std::swap(angle_y_vel_, other->angle_y_vel_);
    std::swap(angle_z_vel_, other->angle_z_vel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhirlVel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhirlVel_descriptor_;
  metadata.reflection = WhirlVel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MultiRobot::kStartPositionFieldNumber;
#endif  // !_MSC_VER

MultiRobot::MultiRobot()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTS_DECISION.MultiRobot)
}

void MultiRobot::InitAsDefaultInstance() {
  start_position_ = const_cast< ::RTS_DECISION::Point*>(&::RTS_DECISION::Point::default_instance());
}

MultiRobot::MultiRobot(const MultiRobot& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RTS_DECISION.MultiRobot)
}

void MultiRobot::SharedCtor() {
  _cached_size_ = 0;
  start_position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiRobot::~MultiRobot() {
  // @@protoc_insertion_point(destructor:RTS_DECISION.MultiRobot)
  SharedDtor();
}

void MultiRobot::SharedDtor() {
  if (this != default_instance_) {
    delete start_position_;
  }
}

void MultiRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiRobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiRobot_descriptor_;
}

const MultiRobot& MultiRobot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

MultiRobot* MultiRobot::default_instance_ = NULL;

MultiRobot* MultiRobot::New() const {
  return new MultiRobot;
}

void MultiRobot::Clear() {
  if (has_start_position()) {
    if (start_position_ != NULL) start_position_->::RTS_DECISION::Point::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MultiRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTS_DECISION.MultiRobot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RTS_DECISION.Point start_position = 7;
      case 7: {
        if (tag == 58) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTS_DECISION.MultiRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTS_DECISION.MultiRobot)
  return false;
#undef DO_
}

void MultiRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTS_DECISION.MultiRobot)
  // optional .RTS_DECISION.Point start_position = 7;
  if (has_start_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->start_position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RTS_DECISION.MultiRobot)
}

::google::protobuf::uint8* MultiRobot::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTS_DECISION.MultiRobot)
  // optional .RTS_DECISION.Point start_position = 7;
  if (has_start_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->start_position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTS_DECISION.MultiRobot)
  return target;
}

int MultiRobot::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RTS_DECISION.Point start_position = 7;
    if (has_start_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start_position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiRobot::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MultiRobot* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MultiRobot*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MultiRobot::MergeFrom(const MultiRobot& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_position()) {
      mutable_start_position()->::RTS_DECISION::Point::MergeFrom(from.start_position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MultiRobot::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRobot::CopyFrom(const MultiRobot& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRobot::IsInitialized() const {

  return true;
}

void MultiRobot::Swap(MultiRobot* other) {
  if (other != this) {
    std::swap(start_position_, other->start_position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MultiRobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiRobot_descriptor_;
  metadata.reflection = MultiRobot_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CameraGimbalTransform::kOffsetXFieldNumber;
const int CameraGimbalTransform::kOffsetYFieldNumber;
const int CameraGimbalTransform::kOffsetZFieldNumber;
const int CameraGimbalTransform::kOffsetPitchFieldNumber;
const int CameraGimbalTransform::kOffsetYawFieldNumber;
const int CameraGimbalTransform::kPinchParamFieldNumber;
const int CameraGimbalTransform::kYawChangeThresholdFieldNumber;
const int CameraGimbalTransform::kPitchChangeThresholdFieldNumber;
const int CameraGimbalTransform::kPidKpFieldNumber;
const int CameraGimbalTransform::kPidKiFieldNumber;
const int CameraGimbalTransform::kPidKdFieldNumber;
const int CameraGimbalTransform::kPidMaxOutFieldNumber;
const int CameraGimbalTransform::kPidMaxIoutFieldNumber;
const int CameraGimbalTransform::kOffsetYWeightFieldNumber;
#endif  // !_MSC_VER

CameraGimbalTransform::CameraGimbalTransform()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTS_DECISION.CameraGimbalTransform)
}

void CameraGimbalTransform::InitAsDefaultInstance() {
}

CameraGimbalTransform::CameraGimbalTransform(const CameraGimbalTransform& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RTS_DECISION.CameraGimbalTransform)
}

void CameraGimbalTransform::SharedCtor() {
  _cached_size_ = 0;
  offset_x_ = 0;
  offset_y_ = 0;
  offset_z_ = 0;
  offset_pitch_ = 0;
  offset_yaw_ = 0;
  pinch_param_ = 0;
  yaw_change_threshold_ = 0;
  pitch_change_threshold_ = 0;
  pid_kp_ = 0;
  pid_ki_ = 0;
  pid_kd_ = 0;
  pid_max_out_ = 0;
  pid_max_iout_ = 0;
  offset_y_weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CameraGimbalTransform::~CameraGimbalTransform() {
  // @@protoc_insertion_point(destructor:RTS_DECISION.CameraGimbalTransform)
  SharedDtor();
}

void CameraGimbalTransform::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CameraGimbalTransform::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CameraGimbalTransform::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CameraGimbalTransform_descriptor_;
}

const CameraGimbalTransform& CameraGimbalTransform::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

CameraGimbalTransform* CameraGimbalTransform::default_instance_ = NULL;

CameraGimbalTransform* CameraGimbalTransform::New() const {
  return new CameraGimbalTransform;
}

void CameraGimbalTransform::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<CameraGimbalTransform*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(offset_x_, pitch_change_threshold_);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(pid_kp_, offset_y_weight_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CameraGimbalTransform::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTS_DECISION.CameraGimbalTransform)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float offset_x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_x_)));
          set_has_offset_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_offset_y;
        break;
      }

      // required float offset_y = 2;
      case 2: {
        if (tag == 21) {
         parse_offset_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_y_)));
          set_has_offset_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_offset_z;
        break;
      }

      // required float offset_z = 3;
      case 3: {
        if (tag == 29) {
         parse_offset_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_z_)));
          set_has_offset_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_offset_pitch;
        break;
      }

      // required float offset_pitch = 4;
      case 4: {
        if (tag == 37) {
         parse_offset_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_pitch_)));
          set_has_offset_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_offset_yaw;
        break;
      }

      // required float offset_yaw = 5;
      case 5: {
        if (tag == 45) {
         parse_offset_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_yaw_)));
          set_has_offset_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_pinch_param;
        break;
      }

      // optional float pinch_param = 6;
      case 6: {
        if (tag == 53) {
         parse_pinch_param:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pinch_param_)));
          set_has_pinch_param();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_yaw_change_threshold;
        break;
      }

      // required float yaw_change_threshold = 7;
      case 7: {
        if (tag == 61) {
         parse_yaw_change_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_change_threshold_)));
          set_has_yaw_change_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(69)) goto parse_pitch_change_threshold;
        break;
      }

      // required float pitch_change_threshold = 8;
      case 8: {
        if (tag == 69) {
         parse_pitch_change_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_change_threshold_)));
          set_has_pitch_change_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_pid_kp;
        break;
      }

      // optional float pid_kp = 9;
      case 9: {
        if (tag == 77) {
         parse_pid_kp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pid_kp_)));
          set_has_pid_kp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_pid_ki;
        break;
      }

      // optional float pid_ki = 10;
      case 10: {
        if (tag == 85) {
         parse_pid_ki:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pid_ki_)));
          set_has_pid_ki();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(93)) goto parse_pid_kd;
        break;
      }

      // optional float pid_kd = 11;
      case 11: {
        if (tag == 93) {
         parse_pid_kd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pid_kd_)));
          set_has_pid_kd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(101)) goto parse_pid_max_out;
        break;
      }

      // optional float pid_max_out = 12;
      case 12: {
        if (tag == 101) {
         parse_pid_max_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pid_max_out_)));
          set_has_pid_max_out();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(109)) goto parse_pid_max_iout;
        break;
      }

      // optional float pid_max_iout = 13;
      case 13: {
        if (tag == 109) {
         parse_pid_max_iout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pid_max_iout_)));
          set_has_pid_max_iout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_offset_y_weight;
        break;
      }

      // required float offset_y_weight = 14;
      case 14: {
        if (tag == 117) {
         parse_offset_y_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &offset_y_weight_)));
          set_has_offset_y_weight();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTS_DECISION.CameraGimbalTransform)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTS_DECISION.CameraGimbalTransform)
  return false;
#undef DO_
}

void CameraGimbalTransform::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTS_DECISION.CameraGimbalTransform)
  // required float offset_x = 1;
  if (has_offset_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->offset_x(), output);
  }

  // required float offset_y = 2;
  if (has_offset_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->offset_y(), output);
  }

  // required float offset_z = 3;
  if (has_offset_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->offset_z(), output);
  }

  // required float offset_pitch = 4;
  if (has_offset_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->offset_pitch(), output);
  }

  // required float offset_yaw = 5;
  if (has_offset_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->offset_yaw(), output);
  }

  // optional float pinch_param = 6;
  if (has_pinch_param()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pinch_param(), output);
  }

  // required float yaw_change_threshold = 7;
  if (has_yaw_change_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->yaw_change_threshold(), output);
  }

  // required float pitch_change_threshold = 8;
  if (has_pitch_change_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->pitch_change_threshold(), output);
  }

  // optional float pid_kp = 9;
  if (has_pid_kp()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->pid_kp(), output);
  }

  // optional float pid_ki = 10;
  if (has_pid_ki()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->pid_ki(), output);
  }

  // optional float pid_kd = 11;
  if (has_pid_kd()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->pid_kd(), output);
  }

  // optional float pid_max_out = 12;
  if (has_pid_max_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->pid_max_out(), output);
  }

  // optional float pid_max_iout = 13;
  if (has_pid_max_iout()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->pid_max_iout(), output);
  }

  // required float offset_y_weight = 14;
  if (has_offset_y_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->offset_y_weight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RTS_DECISION.CameraGimbalTransform)
}

::google::protobuf::uint8* CameraGimbalTransform::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTS_DECISION.CameraGimbalTransform)
  // required float offset_x = 1;
  if (has_offset_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->offset_x(), target);
  }

  // required float offset_y = 2;
  if (has_offset_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->offset_y(), target);
  }

  // required float offset_z = 3;
  if (has_offset_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->offset_z(), target);
  }

  // required float offset_pitch = 4;
  if (has_offset_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->offset_pitch(), target);
  }

  // required float offset_yaw = 5;
  if (has_offset_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->offset_yaw(), target);
  }

  // optional float pinch_param = 6;
  if (has_pinch_param()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pinch_param(), target);
  }

  // required float yaw_change_threshold = 7;
  if (has_yaw_change_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->yaw_change_threshold(), target);
  }

  // required float pitch_change_threshold = 8;
  if (has_pitch_change_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->pitch_change_threshold(), target);
  }

  // optional float pid_kp = 9;
  if (has_pid_kp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->pid_kp(), target);
  }

  // optional float pid_ki = 10;
  if (has_pid_ki()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->pid_ki(), target);
  }

  // optional float pid_kd = 11;
  if (has_pid_kd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->pid_kd(), target);
  }

  // optional float pid_max_out = 12;
  if (has_pid_max_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->pid_max_out(), target);
  }

  // optional float pid_max_iout = 13;
  if (has_pid_max_iout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->pid_max_iout(), target);
  }

  // required float offset_y_weight = 14;
  if (has_offset_y_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->offset_y_weight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTS_DECISION.CameraGimbalTransform)
  return target;
}

int CameraGimbalTransform::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float offset_x = 1;
    if (has_offset_x()) {
      total_size += 1 + 4;
    }

    // required float offset_y = 2;
    if (has_offset_y()) {
      total_size += 1 + 4;
    }

    // required float offset_z = 3;
    if (has_offset_z()) {
      total_size += 1 + 4;
    }

    // required float offset_pitch = 4;
    if (has_offset_pitch()) {
      total_size += 1 + 4;
    }

    // required float offset_yaw = 5;
    if (has_offset_yaw()) {
      total_size += 1 + 4;
    }

    // optional float pinch_param = 6;
    if (has_pinch_param()) {
      total_size += 1 + 4;
    }

    // required float yaw_change_threshold = 7;
    if (has_yaw_change_threshold()) {
      total_size += 1 + 4;
    }

    // required float pitch_change_threshold = 8;
    if (has_pitch_change_threshold()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional float pid_kp = 9;
    if (has_pid_kp()) {
      total_size += 1 + 4;
    }

    // optional float pid_ki = 10;
    if (has_pid_ki()) {
      total_size += 1 + 4;
    }

    // optional float pid_kd = 11;
    if (has_pid_kd()) {
      total_size += 1 + 4;
    }

    // optional float pid_max_out = 12;
    if (has_pid_max_out()) {
      total_size += 1 + 4;
    }

    // optional float pid_max_iout = 13;
    if (has_pid_max_iout()) {
      total_size += 1 + 4;
    }

    // required float offset_y_weight = 14;
    if (has_offset_y_weight()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CameraGimbalTransform::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CameraGimbalTransform* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CameraGimbalTransform*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CameraGimbalTransform::MergeFrom(const CameraGimbalTransform& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_offset_x()) {
      set_offset_x(from.offset_x());
    }
    if (from.has_offset_y()) {
      set_offset_y(from.offset_y());
    }
    if (from.has_offset_z()) {
      set_offset_z(from.offset_z());
    }
    if (from.has_offset_pitch()) {
      set_offset_pitch(from.offset_pitch());
    }
    if (from.has_offset_yaw()) {
      set_offset_yaw(from.offset_yaw());
    }
    if (from.has_pinch_param()) {
      set_pinch_param(from.pinch_param());
    }
    if (from.has_yaw_change_threshold()) {
      set_yaw_change_threshold(from.yaw_change_threshold());
    }
    if (from.has_pitch_change_threshold()) {
      set_pitch_change_threshold(from.pitch_change_threshold());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pid_kp()) {
      set_pid_kp(from.pid_kp());
    }
    if (from.has_pid_ki()) {
      set_pid_ki(from.pid_ki());
    }
    if (from.has_pid_kd()) {
      set_pid_kd(from.pid_kd());
    }
    if (from.has_pid_max_out()) {
      set_pid_max_out(from.pid_max_out());
    }
    if (from.has_pid_max_iout()) {
      set_pid_max_iout(from.pid_max_iout());
    }
    if (from.has_offset_y_weight()) {
      set_offset_y_weight(from.offset_y_weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CameraGimbalTransform::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraGimbalTransform::CopyFrom(const CameraGimbalTransform& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraGimbalTransform::IsInitialized() const {
  if ((_has_bits_[0] & 0x000020df) != 0x000020df) return false;

  return true;
}

void CameraGimbalTransform::Swap(CameraGimbalTransform* other) {
  if (other != this) {
    std::swap(offset_x_, other->offset_x_);
    std::swap(offset_y_, other->offset_y_);
    std::swap(offset_z_, other->offset_z_);
    std::swap(offset_pitch_, other->offset_pitch_);
    std::swap(offset_yaw_, other->offset_yaw_);
    std::swap(pinch_param_, other->pinch_param_);
    std::swap(yaw_change_threshold_, other->yaw_change_threshold_);
    std::swap(pitch_change_threshold_, other->pitch_change_threshold_);
    std::swap(pid_kp_, other->pid_kp_);
    std::swap(pid_ki_, other->pid_ki_);
    std::swap(pid_kd_, other->pid_kd_);
    std::swap(pid_max_out_, other->pid_max_out_);
    std::swap(pid_max_iout_, other->pid_max_iout_);
    std::swap(offset_y_weight_, other->offset_y_weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CameraGimbalTransform::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CameraGimbalTransform_descriptor_;
  metadata.reflection = CameraGimbalTransform_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DetectionShootConfig::kArmorChangeThresholdFieldNumber;
const int DetectionShootConfig::kDetectLostLimitFieldNumber;
const int DetectionShootConfig::kGimbalAdjustHistoryRangeFieldNumber;
const int DetectionShootConfig::kArmorDetectedHistoryRangeFieldNumber;
const int DetectionShootConfig::kArmorDetectedHistoryThresholdFieldNumber;
const int DetectionShootConfig::kEnemyDetectedHistoryRangeFieldNumber;
const int DetectionShootConfig::kEnemyDetectedHistoryThresholdFieldNumber;
const int DetectionShootConfig::kEnemyFrontPoseHistoryRangeFieldNumber;
const int DetectionShootConfig::kEnemyFrontPoseHistoryThresholdFieldNumber;
const int DetectionShootConfig::kShootDistanceLimitFieldNumber;
#endif  // !_MSC_VER

DetectionShootConfig::DetectionShootConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTS_DECISION.DetectionShootConfig)
}

void DetectionShootConfig::InitAsDefaultInstance() {
}

DetectionShootConfig::DetectionShootConfig(const DetectionShootConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RTS_DECISION.DetectionShootConfig)
}

void DetectionShootConfig::SharedCtor() {
  _cached_size_ = 0;
  armor_change_threshold_ = 0;
  detect_lost_limit_ = 0;
  gimbal_adjust_history_range_ = 0;
  armor_detected_history_range_ = 0;
  armor_detected_history_threshold_ = 0;
  enemy_detected_history_range_ = 0;
  enemy_detected_history_threshold_ = 0;
  enemy_front_pose_history_range_ = 0;
  enemy_front_pose_history_threshold_ = 0;
  shoot_distance_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DetectionShootConfig::~DetectionShootConfig() {
  // @@protoc_insertion_point(destructor:RTS_DECISION.DetectionShootConfig)
  SharedDtor();
}

void DetectionShootConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DetectionShootConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DetectionShootConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectionShootConfig_descriptor_;
}

const DetectionShootConfig& DetectionShootConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

DetectionShootConfig* DetectionShootConfig::default_instance_ = NULL;

DetectionShootConfig* DetectionShootConfig::New() const {
  return new DetectionShootConfig;
}

void DetectionShootConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DetectionShootConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(armor_change_threshold_, enemy_front_pose_history_range_);
  }
  ZR_(enemy_front_pose_history_threshold_, shoot_distance_limit_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DetectionShootConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTS_DECISION.DetectionShootConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float armor_change_threshold = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &armor_change_threshold_)));
          set_has_armor_change_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_detect_lost_limit;
        break;
      }

      // optional int32 detect_lost_limit = 2;
      case 2: {
        if (tag == 16) {
         parse_detect_lost_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &detect_lost_limit_)));
          set_has_detect_lost_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gimbal_adjust_history_range;
        break;
      }

      // optional int32 gimbal_adjust_history_range = 3;
      case 3: {
        if (tag == 24) {
         parse_gimbal_adjust_history_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gimbal_adjust_history_range_)));
          set_has_gimbal_adjust_history_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_armor_detected_history_range;
        break;
      }

      // optional int32 armor_detected_history_range = 4;
      case 4: {
        if (tag == 32) {
         parse_armor_detected_history_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_detected_history_range_)));
          set_has_armor_detected_history_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_armor_detected_history_threshold;
        break;
      }

      // optional int32 armor_detected_history_threshold = 5;
      case 5: {
        if (tag == 40) {
         parse_armor_detected_history_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armor_detected_history_threshold_)));
          set_has_armor_detected_history_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_enemy_detected_history_range;
        break;
      }

      // optional int32 enemy_detected_history_range = 6;
      case 6: {
        if (tag == 48) {
         parse_enemy_detected_history_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_detected_history_range_)));
          set_has_enemy_detected_history_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_enemy_detected_history_threshold;
        break;
      }

      // optional int32 enemy_detected_history_threshold = 7;
      case 7: {
        if (tag == 56) {
         parse_enemy_detected_history_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_detected_history_threshold_)));
          set_has_enemy_detected_history_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_enemy_front_pose_history_range;
        break;
      }

      // optional int32 enemy_front_pose_history_range = 8;
      case 8: {
        if (tag == 64) {
         parse_enemy_front_pose_history_range:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_front_pose_history_range_)));
          set_has_enemy_front_pose_history_range();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_enemy_front_pose_history_threshold;
        break;
      }

      // optional int32 enemy_front_pose_history_threshold = 9;
      case 9: {
        if (tag == 72) {
         parse_enemy_front_pose_history_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_front_pose_history_threshold_)));
          set_has_enemy_front_pose_history_threshold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_shoot_distance_limit;
        break;
      }

      // required float shoot_distance_limit = 10;
      case 10: {
        if (tag == 85) {
         parse_shoot_distance_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &shoot_distance_limit_)));
          set_has_shoot_distance_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTS_DECISION.DetectionShootConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTS_DECISION.DetectionShootConfig)
  return false;
#undef DO_
}

void DetectionShootConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTS_DECISION.DetectionShootConfig)
  // optional float armor_change_threshold = 1;
  if (has_armor_change_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->armor_change_threshold(), output);
  }

  // optional int32 detect_lost_limit = 2;
  if (has_detect_lost_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->detect_lost_limit(), output);
  }

  // optional int32 gimbal_adjust_history_range = 3;
  if (has_gimbal_adjust_history_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gimbal_adjust_history_range(), output);
  }

  // optional int32 armor_detected_history_range = 4;
  if (has_armor_detected_history_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->armor_detected_history_range(), output);
  }

  // optional int32 armor_detected_history_threshold = 5;
  if (has_armor_detected_history_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->armor_detected_history_threshold(), output);
  }

  // optional int32 enemy_detected_history_range = 6;
  if (has_enemy_detected_history_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->enemy_detected_history_range(), output);
  }

  // optional int32 enemy_detected_history_threshold = 7;
  if (has_enemy_detected_history_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->enemy_detected_history_threshold(), output);
  }

  // optional int32 enemy_front_pose_history_range = 8;
  if (has_enemy_front_pose_history_range()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->enemy_front_pose_history_range(), output);
  }

  // optional int32 enemy_front_pose_history_threshold = 9;
  if (has_enemy_front_pose_history_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->enemy_front_pose_history_threshold(), output);
  }

  // required float shoot_distance_limit = 10;
  if (has_shoot_distance_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->shoot_distance_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RTS_DECISION.DetectionShootConfig)
}

::google::protobuf::uint8* DetectionShootConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTS_DECISION.DetectionShootConfig)
  // optional float armor_change_threshold = 1;
  if (has_armor_change_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->armor_change_threshold(), target);
  }

  // optional int32 detect_lost_limit = 2;
  if (has_detect_lost_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->detect_lost_limit(), target);
  }

  // optional int32 gimbal_adjust_history_range = 3;
  if (has_gimbal_adjust_history_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gimbal_adjust_history_range(), target);
  }

  // optional int32 armor_detected_history_range = 4;
  if (has_armor_detected_history_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->armor_detected_history_range(), target);
  }

  // optional int32 armor_detected_history_threshold = 5;
  if (has_armor_detected_history_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->armor_detected_history_threshold(), target);
  }

  // optional int32 enemy_detected_history_range = 6;
  if (has_enemy_detected_history_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->enemy_detected_history_range(), target);
  }

  // optional int32 enemy_detected_history_threshold = 7;
  if (has_enemy_detected_history_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->enemy_detected_history_threshold(), target);
  }

  // optional int32 enemy_front_pose_history_range = 8;
  if (has_enemy_front_pose_history_range()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->enemy_front_pose_history_range(), target);
  }

  // optional int32 enemy_front_pose_history_threshold = 9;
  if (has_enemy_front_pose_history_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->enemy_front_pose_history_threshold(), target);
  }

  // required float shoot_distance_limit = 10;
  if (has_shoot_distance_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->shoot_distance_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTS_DECISION.DetectionShootConfig)
  return target;
}

int DetectionShootConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float armor_change_threshold = 1;
    if (has_armor_change_threshold()) {
      total_size += 1 + 4;
    }

    // optional int32 detect_lost_limit = 2;
    if (has_detect_lost_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->detect_lost_limit());
    }

    // optional int32 gimbal_adjust_history_range = 3;
    if (has_gimbal_adjust_history_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gimbal_adjust_history_range());
    }

    // optional int32 armor_detected_history_range = 4;
    if (has_armor_detected_history_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor_detected_history_range());
    }

    // optional int32 armor_detected_history_threshold = 5;
    if (has_armor_detected_history_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armor_detected_history_threshold());
    }

    // optional int32 enemy_detected_history_range = 6;
    if (has_enemy_detected_history_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemy_detected_history_range());
    }

    // optional int32 enemy_detected_history_threshold = 7;
    if (has_enemy_detected_history_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemy_detected_history_threshold());
    }

    // optional int32 enemy_front_pose_history_range = 8;
    if (has_enemy_front_pose_history_range()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemy_front_pose_history_range());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 enemy_front_pose_history_threshold = 9;
    if (has_enemy_front_pose_history_threshold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemy_front_pose_history_threshold());
    }

    // required float shoot_distance_limit = 10;
    if (has_shoot_distance_limit()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DetectionShootConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DetectionShootConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DetectionShootConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DetectionShootConfig::MergeFrom(const DetectionShootConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_armor_change_threshold()) {
      set_armor_change_threshold(from.armor_change_threshold());
    }
    if (from.has_detect_lost_limit()) {
      set_detect_lost_limit(from.detect_lost_limit());
    }
    if (from.has_gimbal_adjust_history_range()) {
      set_gimbal_adjust_history_range(from.gimbal_adjust_history_range());
    }
    if (from.has_armor_detected_history_range()) {
      set_armor_detected_history_range(from.armor_detected_history_range());
    }
    if (from.has_armor_detected_history_threshold()) {
      set_armor_detected_history_threshold(from.armor_detected_history_threshold());
    }
    if (from.has_enemy_detected_history_range()) {
      set_enemy_detected_history_range(from.enemy_detected_history_range());
    }
    if (from.has_enemy_detected_history_threshold()) {
      set_enemy_detected_history_threshold(from.enemy_detected_history_threshold());
    }
    if (from.has_enemy_front_pose_history_range()) {
      set_enemy_front_pose_history_range(from.enemy_front_pose_history_range());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_enemy_front_pose_history_threshold()) {
      set_enemy_front_pose_history_threshold(from.enemy_front_pose_history_threshold());
    }
    if (from.has_shoot_distance_limit()) {
      set_shoot_distance_limit(from.shoot_distance_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DetectionShootConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DetectionShootConfig::CopyFrom(const DetectionShootConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DetectionShootConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000200) != 0x00000200) return false;

  return true;
}

void DetectionShootConfig::Swap(DetectionShootConfig* other) {
  if (other != this) {
    std::swap(armor_change_threshold_, other->armor_change_threshold_);
    std::swap(detect_lost_limit_, other->detect_lost_limit_);
    std::swap(gimbal_adjust_history_range_, other->gimbal_adjust_history_range_);
    std::swap(armor_detected_history_range_, other->armor_detected_history_range_);
    std::swap(armor_detected_history_threshold_, other->armor_detected_history_threshold_);
    std::swap(enemy_detected_history_range_, other->enemy_detected_history_range_);
    std::swap(enemy_detected_history_threshold_, other->enemy_detected_history_threshold_);
    std::swap(enemy_front_pose_history_range_, other->enemy_front_pose_history_range_);
    std::swap(enemy_front_pose_history_threshold_, other->enemy_front_pose_history_threshold_);
    std::swap(shoot_distance_limit_, other->shoot_distance_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DetectionShootConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DetectionShootConfig_descriptor_;
  metadata.reflection = DetectionShootConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DecisionConfig::kPointFieldNumber;
const int DecisionConfig::kSimulateFieldNumber;
const int DecisionConfig::kMasterFieldNumber;
const int DecisionConfig::kEscapeFieldNumber;
const int DecisionConfig::kBuffPointFieldNumber;
const int DecisionConfig::kSearchLimitFieldNumber;
const int DecisionConfig::kWhirlVelFieldNumber;
const int DecisionConfig::kWingBotFieldNumber;
const int DecisionConfig::kMasterBotFieldNumber;
const int DecisionConfig::kWingBotTaskPointFieldNumber;
const int DecisionConfig::kSearchRegion1FieldNumber;
const int DecisionConfig::kSearchRegion2FieldNumber;
const int DecisionConfig::kSearchRegion3FieldNumber;
const int DecisionConfig::kSearchRegion4FieldNumber;
const int DecisionConfig::kPatrolRegionFieldNumber;
const int DecisionConfig::kShooterModelConfigFieldNumber;
const int DecisionConfig::kRobotIdFieldNumber;
const int DecisionConfig::kBuffAdjustPointFieldNumber;
const int DecisionConfig::kDetectionShootConfigFieldNumber;
const int DecisionConfig::kCameraGimbalTransformFieldNumber;
const int DecisionConfig::kUsePidFieldNumber;
#endif  // !_MSC_VER

DecisionConfig::DecisionConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RTS_DECISION.DecisionConfig)
}

void DecisionConfig::InitAsDefaultInstance() {
  escape_ = const_cast< ::RTS_DECISION::EscapeConstraint*>(&::RTS_DECISION::EscapeConstraint::default_instance());
  search_limit_ = const_cast< ::RTS_DECISION::SearchConstraint*>(&::RTS_DECISION::SearchConstraint::default_instance());
  whirl_vel_ = const_cast< ::RTS_DECISION::WhirlVel*>(&::RTS_DECISION::WhirlVel::default_instance());
  wing_bot_ = const_cast< ::RTS_DECISION::MultiRobot*>(&::RTS_DECISION::MultiRobot::default_instance());
  master_bot_ = const_cast< ::RTS_DECISION::MultiRobot*>(&::RTS_DECISION::MultiRobot::default_instance());
  wing_bot_task_point_ = const_cast< ::RTS_DECISION::Point*>(&::RTS_DECISION::Point::default_instance());
  shooter_model_config_ = const_cast< ::RTS_DECISION::ShooterModelConfig*>(&::RTS_DECISION::ShooterModelConfig::default_instance());
  detection_shoot_config_ = const_cast< ::RTS_DECISION::DetectionShootConfig*>(&::RTS_DECISION::DetectionShootConfig::default_instance());
  camera_gimbal_transform_ = const_cast< ::RTS_DECISION::CameraGimbalTransform*>(&::RTS_DECISION::CameraGimbalTransform::default_instance());
}

DecisionConfig::DecisionConfig(const DecisionConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:RTS_DECISION.DecisionConfig)
}

void DecisionConfig::SharedCtor() {
  _cached_size_ = 0;
  simulate_ = false;
  master_ = false;
  escape_ = NULL;
  search_limit_ = NULL;
  whirl_vel_ = NULL;
  wing_bot_ = NULL;
  master_bot_ = NULL;
  wing_bot_task_point_ = NULL;
  shooter_model_config_ = NULL;
  robot_id_ = 0;
  detection_shoot_config_ = NULL;
  camera_gimbal_transform_ = NULL;
  use_pid_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecisionConfig::~DecisionConfig() {
  // @@protoc_insertion_point(destructor:RTS_DECISION.DecisionConfig)
  SharedDtor();
}

void DecisionConfig::SharedDtor() {
  if (this != default_instance_) {
    delete escape_;
    delete search_limit_;
    delete whirl_vel_;
    delete wing_bot_;
    delete master_bot_;
    delete wing_bot_task_point_;
    delete shooter_model_config_;
    delete detection_shoot_config_;
    delete camera_gimbal_transform_;
  }
}

void DecisionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecisionConfig_descriptor_;
}

const DecisionConfig& DecisionConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

DecisionConfig* DecisionConfig::default_instance_ = NULL;

DecisionConfig* DecisionConfig::New() const {
  return new DecisionConfig;
}

void DecisionConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DecisionConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 238) {
    ZR_(simulate_, master_);
    if (has_escape()) {
      if (escape_ != NULL) escape_->::RTS_DECISION::EscapeConstraint::Clear();
    }
    if (has_search_limit()) {
      if (search_limit_ != NULL) search_limit_->::RTS_DECISION::SearchConstraint::Clear();
    }
    if (has_whirl_vel()) {
      if (whirl_vel_ != NULL) whirl_vel_->::RTS_DECISION::WhirlVel::Clear();
    }
    if (has_wing_bot()) {
      if (wing_bot_ != NULL) wing_bot_->::RTS_DECISION::MultiRobot::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 33536) {
    if (has_master_bot()) {
      if (master_bot_ != NULL) master_bot_->::RTS_DECISION::MultiRobot::Clear();
    }
    if (has_wing_bot_task_point()) {
      if (wing_bot_task_point_ != NULL) wing_bot_task_point_->::RTS_DECISION::Point::Clear();
    }
    if (has_shooter_model_config()) {
      if (shooter_model_config_ != NULL) shooter_model_config_->::RTS_DECISION::ShooterModelConfig::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 1900544) {
    ZR_(use_pid_, robot_id_);
    if (has_detection_shoot_config()) {
      if (detection_shoot_config_ != NULL) detection_shoot_config_->::RTS_DECISION::DetectionShootConfig::Clear();
    }
    if (has_camera_gimbal_transform()) {
      if (camera_gimbal_transform_ != NULL) camera_gimbal_transform_->::RTS_DECISION::CameraGimbalTransform::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  point_.Clear();
  buff_point_.Clear();
  search_region_1_.Clear();
  search_region_2_.Clear();
  search_region_3_.Clear();
  search_region_4_.Clear();
  patrol_region_.Clear();
  buff_adjust_point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DecisionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RTS_DECISION.DecisionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RTS_DECISION.Point point = 1;
      case 1: {
        if (tag == 10) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_point;
        if (input->ExpectTag(16)) goto parse_simulate;
        break;
      }

      // optional bool simulate = 2 [default = false];
      case 2: {
        if (tag == 16) {
         parse_simulate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &simulate_)));
          set_has_simulate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_master;
        break;
      }

      // optional bool master = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &master_)));
          set_has_master();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_escape;
        break;
      }

      // optional .RTS_DECISION.EscapeConstraint escape = 4;
      case 4: {
        if (tag == 34) {
         parse_escape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_escape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_buff_point;
        break;
      }

      // repeated .RTS_DECISION.Point buff_point = 5;
      case 5: {
        if (tag == 42) {
         parse_buff_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_buff_point;
        if (input->ExpectTag(50)) goto parse_search_limit;
        break;
      }

      // optional .RTS_DECISION.SearchConstraint search_limit = 6;
      case 6: {
        if (tag == 50) {
         parse_search_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_limit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_whirl_vel;
        break;
      }

      // optional .RTS_DECISION.WhirlVel whirl_vel = 7;
      case 7: {
        if (tag == 58) {
         parse_whirl_vel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_whirl_vel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_wing_bot;
        break;
      }

      // optional .RTS_DECISION.MultiRobot wing_bot = 8;
      case 8: {
        if (tag == 66) {
         parse_wing_bot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wing_bot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_master_bot;
        break;
      }

      // optional .RTS_DECISION.MultiRobot master_bot = 9;
      case 9: {
        if (tag == 74) {
         parse_master_bot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master_bot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_wing_bot_task_point;
        break;
      }

      // optional .RTS_DECISION.Point wing_bot_task_point = 10;
      case 10: {
        if (tag == 82) {
         parse_wing_bot_task_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wing_bot_task_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_search_region_1;
        break;
      }

      // repeated .RTS_DECISION.Point search_region_1 = 11;
      case 11: {
        if (tag == 90) {
         parse_search_region_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_region_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_search_region_1;
        if (input->ExpectTag(98)) goto parse_search_region_2;
        break;
      }

      // repeated .RTS_DECISION.Point search_region_2 = 12;
      case 12: {
        if (tag == 98) {
         parse_search_region_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_region_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_search_region_2;
        if (input->ExpectTag(106)) goto parse_search_region_3;
        break;
      }

      // repeated .RTS_DECISION.Point search_region_3 = 13;
      case 13: {
        if (tag == 106) {
         parse_search_region_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_region_3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_search_region_3;
        if (input->ExpectTag(114)) goto parse_search_region_4;
        break;
      }

      // repeated .RTS_DECISION.Point search_region_4 = 14;
      case 14: {
        if (tag == 114) {
         parse_search_region_4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_search_region_4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_search_region_4;
        if (input->ExpectTag(122)) goto parse_patrol_region;
        break;
      }

      // repeated .RTS_DECISION.Point patrol_region = 15;
      case 15: {
        if (tag == 122) {
         parse_patrol_region:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_patrol_region()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_patrol_region;
        if (input->ExpectTag(130)) goto parse_shooter_model_config;
        break;
      }

      // optional .RTS_DECISION.ShooterModelConfig shooter_model_config = 16;
      case 16: {
        if (tag == 130) {
         parse_shooter_model_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shooter_model_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_robot_id;
        break;
      }

      // optional int32 robot_id = 17;
      case 17: {
        if (tag == 136) {
         parse_robot_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robot_id_)));
          set_has_robot_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_buff_adjust_point;
        break;
      }

      // repeated .RTS_DECISION.Point buff_adjust_point = 18;
      case 18: {
        if (tag == 146) {
         parse_buff_adjust_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buff_adjust_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_buff_adjust_point;
        if (input->ExpectTag(154)) goto parse_detection_shoot_config;
        break;
      }

      // optional .RTS_DECISION.DetectionShootConfig detection_shoot_config = 19;
      case 19: {
        if (tag == 154) {
         parse_detection_shoot_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detection_shoot_config()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_camera_gimbal_transform;
        break;
      }

      // optional .RTS_DECISION.CameraGimbalTransform camera_gimbal_transform = 20;
      case 20: {
        if (tag == 162) {
         parse_camera_gimbal_transform:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_camera_gimbal_transform()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_use_pid;
        break;
      }

      // optional bool use_pid = 21;
      case 21: {
        if (tag == 168) {
         parse_use_pid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_pid_)));
          set_has_use_pid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RTS_DECISION.DecisionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RTS_DECISION.DecisionConfig)
  return false;
#undef DO_
}

void DecisionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RTS_DECISION.DecisionConfig)
  // repeated .RTS_DECISION.Point point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->point(i), output);
  }

  // optional bool simulate = 2 [default = false];
  if (has_simulate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->simulate(), output);
  }

  // optional bool master = 3 [default = false];
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->master(), output);
  }

  // optional .RTS_DECISION.EscapeConstraint escape = 4;
  if (has_escape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->escape(), output);
  }

  // repeated .RTS_DECISION.Point buff_point = 5;
  for (int i = 0; i < this->buff_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->buff_point(i), output);
  }

  // optional .RTS_DECISION.SearchConstraint search_limit = 6;
  if (has_search_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->search_limit(), output);
  }

  // optional .RTS_DECISION.WhirlVel whirl_vel = 7;
  if (has_whirl_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->whirl_vel(), output);
  }

  // optional .RTS_DECISION.MultiRobot wing_bot = 8;
  if (has_wing_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->wing_bot(), output);
  }

  // optional .RTS_DECISION.MultiRobot master_bot = 9;
  if (has_master_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->master_bot(), output);
  }

  // optional .RTS_DECISION.Point wing_bot_task_point = 10;
  if (has_wing_bot_task_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->wing_bot_task_point(), output);
  }

  // repeated .RTS_DECISION.Point search_region_1 = 11;
  for (int i = 0; i < this->search_region_1_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->search_region_1(i), output);
  }

  // repeated .RTS_DECISION.Point search_region_2 = 12;
  for (int i = 0; i < this->search_region_2_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->search_region_2(i), output);
  }

  // repeated .RTS_DECISION.Point search_region_3 = 13;
  for (int i = 0; i < this->search_region_3_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->search_region_3(i), output);
  }

  // repeated .RTS_DECISION.Point search_region_4 = 14;
  for (int i = 0; i < this->search_region_4_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->search_region_4(i), output);
  }

  // repeated .RTS_DECISION.Point patrol_region = 15;
  for (int i = 0; i < this->patrol_region_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->patrol_region(i), output);
  }

  // optional .RTS_DECISION.ShooterModelConfig shooter_model_config = 16;
  if (has_shooter_model_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->shooter_model_config(), output);
  }

  // optional int32 robot_id = 17;
  if (has_robot_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->robot_id(), output);
  }

  // repeated .RTS_DECISION.Point buff_adjust_point = 18;
  for (int i = 0; i < this->buff_adjust_point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->buff_adjust_point(i), output);
  }

  // optional .RTS_DECISION.DetectionShootConfig detection_shoot_config = 19;
  if (has_detection_shoot_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->detection_shoot_config(), output);
  }

  // optional .RTS_DECISION.CameraGimbalTransform camera_gimbal_transform = 20;
  if (has_camera_gimbal_transform()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->camera_gimbal_transform(), output);
  }

  // optional bool use_pid = 21;
  if (has_use_pid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->use_pid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RTS_DECISION.DecisionConfig)
}

::google::protobuf::uint8* DecisionConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:RTS_DECISION.DecisionConfig)
  // repeated .RTS_DECISION.Point point = 1;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->point(i), target);
  }

  // optional bool simulate = 2 [default = false];
  if (has_simulate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->simulate(), target);
  }

  // optional bool master = 3 [default = false];
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->master(), target);
  }

  // optional .RTS_DECISION.EscapeConstraint escape = 4;
  if (has_escape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->escape(), target);
  }

  // repeated .RTS_DECISION.Point buff_point = 5;
  for (int i = 0; i < this->buff_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->buff_point(i), target);
  }

  // optional .RTS_DECISION.SearchConstraint search_limit = 6;
  if (has_search_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->search_limit(), target);
  }

  // optional .RTS_DECISION.WhirlVel whirl_vel = 7;
  if (has_whirl_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->whirl_vel(), target);
  }

  // optional .RTS_DECISION.MultiRobot wing_bot = 8;
  if (has_wing_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->wing_bot(), target);
  }

  // optional .RTS_DECISION.MultiRobot master_bot = 9;
  if (has_master_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->master_bot(), target);
  }

  // optional .RTS_DECISION.Point wing_bot_task_point = 10;
  if (has_wing_bot_task_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->wing_bot_task_point(), target);
  }

  // repeated .RTS_DECISION.Point search_region_1 = 11;
  for (int i = 0; i < this->search_region_1_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->search_region_1(i), target);
  }

  // repeated .RTS_DECISION.Point search_region_2 = 12;
  for (int i = 0; i < this->search_region_2_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->search_region_2(i), target);
  }

  // repeated .RTS_DECISION.Point search_region_3 = 13;
  for (int i = 0; i < this->search_region_3_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->search_region_3(i), target);
  }

  // repeated .RTS_DECISION.Point search_region_4 = 14;
  for (int i = 0; i < this->search_region_4_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->search_region_4(i), target);
  }

  // repeated .RTS_DECISION.Point patrol_region = 15;
  for (int i = 0; i < this->patrol_region_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->patrol_region(i), target);
  }

  // optional .RTS_DECISION.ShooterModelConfig shooter_model_config = 16;
  if (has_shooter_model_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->shooter_model_config(), target);
  }

  // optional int32 robot_id = 17;
  if (has_robot_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->robot_id(), target);
  }

  // repeated .RTS_DECISION.Point buff_adjust_point = 18;
  for (int i = 0; i < this->buff_adjust_point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->buff_adjust_point(i), target);
  }

  // optional .RTS_DECISION.DetectionShootConfig detection_shoot_config = 19;
  if (has_detection_shoot_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->detection_shoot_config(), target);
  }

  // optional .RTS_DECISION.CameraGimbalTransform camera_gimbal_transform = 20;
  if (has_camera_gimbal_transform()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->camera_gimbal_transform(), target);
  }

  // optional bool use_pid = 21;
  if (has_use_pid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->use_pid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RTS_DECISION.DecisionConfig)
  return target;
}

int DecisionConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool simulate = 2 [default = false];
    if (has_simulate()) {
      total_size += 1 + 1;
    }

    // optional bool master = 3 [default = false];
    if (has_master()) {
      total_size += 1 + 1;
    }

    // optional .RTS_DECISION.EscapeConstraint escape = 4;
    if (has_escape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->escape());
    }

    // optional .RTS_DECISION.SearchConstraint search_limit = 6;
    if (has_search_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->search_limit());
    }

    // optional .RTS_DECISION.WhirlVel whirl_vel = 7;
    if (has_whirl_vel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->whirl_vel());
    }

    // optional .RTS_DECISION.MultiRobot wing_bot = 8;
    if (has_wing_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wing_bot());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .RTS_DECISION.MultiRobot master_bot = 9;
    if (has_master_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->master_bot());
    }

    // optional .RTS_DECISION.Point wing_bot_task_point = 10;
    if (has_wing_bot_task_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wing_bot_task_point());
    }

    // optional .RTS_DECISION.ShooterModelConfig shooter_model_config = 16;
    if (has_shooter_model_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shooter_model_config());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 robot_id = 17;
    if (has_robot_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robot_id());
    }

    // optional .RTS_DECISION.DetectionShootConfig detection_shoot_config = 19;
    if (has_detection_shoot_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detection_shoot_config());
    }

    // optional .RTS_DECISION.CameraGimbalTransform camera_gimbal_transform = 20;
    if (has_camera_gimbal_transform()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->camera_gimbal_transform());
    }

    // optional bool use_pid = 21;
    if (has_use_pid()) {
      total_size += 2 + 1;
    }

  }
  // repeated .RTS_DECISION.Point point = 1;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  // repeated .RTS_DECISION.Point buff_point = 5;
  total_size += 1 * this->buff_point_size();
  for (int i = 0; i < this->buff_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_point(i));
  }

  // repeated .RTS_DECISION.Point search_region_1 = 11;
  total_size += 1 * this->search_region_1_size();
  for (int i = 0; i < this->search_region_1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_region_1(i));
  }

  // repeated .RTS_DECISION.Point search_region_2 = 12;
  total_size += 1 * this->search_region_2_size();
  for (int i = 0; i < this->search_region_2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_region_2(i));
  }

  // repeated .RTS_DECISION.Point search_region_3 = 13;
  total_size += 1 * this->search_region_3_size();
  for (int i = 0; i < this->search_region_3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_region_3(i));
  }

  // repeated .RTS_DECISION.Point search_region_4 = 14;
  total_size += 1 * this->search_region_4_size();
  for (int i = 0; i < this->search_region_4_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_region_4(i));
  }

  // repeated .RTS_DECISION.Point patrol_region = 15;
  total_size += 1 * this->patrol_region_size();
  for (int i = 0; i < this->patrol_region_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patrol_region(i));
  }

  // repeated .RTS_DECISION.Point buff_adjust_point = 18;
  total_size += 2 * this->buff_adjust_point_size();
  for (int i = 0; i < this->buff_adjust_point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buff_adjust_point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DecisionConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DecisionConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DecisionConfig::MergeFrom(const DecisionConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  buff_point_.MergeFrom(from.buff_point_);
  search_region_1_.MergeFrom(from.search_region_1_);
  search_region_2_.MergeFrom(from.search_region_2_);
  search_region_3_.MergeFrom(from.search_region_3_);
  search_region_4_.MergeFrom(from.search_region_4_);
  patrol_region_.MergeFrom(from.patrol_region_);
  buff_adjust_point_.MergeFrom(from.buff_adjust_point_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_simulate()) {
      set_simulate(from.simulate());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
    if (from.has_escape()) {
      mutable_escape()->::RTS_DECISION::EscapeConstraint::MergeFrom(from.escape());
    }
    if (from.has_search_limit()) {
      mutable_search_limit()->::RTS_DECISION::SearchConstraint::MergeFrom(from.search_limit());
    }
    if (from.has_whirl_vel()) {
      mutable_whirl_vel()->::RTS_DECISION::WhirlVel::MergeFrom(from.whirl_vel());
    }
    if (from.has_wing_bot()) {
      mutable_wing_bot()->::RTS_DECISION::MultiRobot::MergeFrom(from.wing_bot());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_master_bot()) {
      mutable_master_bot()->::RTS_DECISION::MultiRobot::MergeFrom(from.master_bot());
    }
    if (from.has_wing_bot_task_point()) {
      mutable_wing_bot_task_point()->::RTS_DECISION::Point::MergeFrom(from.wing_bot_task_point());
    }
    if (from.has_shooter_model_config()) {
      mutable_shooter_model_config()->::RTS_DECISION::ShooterModelConfig::MergeFrom(from.shooter_model_config());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_robot_id()) {
      set_robot_id(from.robot_id());
    }
    if (from.has_detection_shoot_config()) {
      mutable_detection_shoot_config()->::RTS_DECISION::DetectionShootConfig::MergeFrom(from.detection_shoot_config());
    }
    if (from.has_camera_gimbal_transform()) {
      mutable_camera_gimbal_transform()->::RTS_DECISION::CameraGimbalTransform::MergeFrom(from.camera_gimbal_transform());
    }
    if (from.has_use_pid()) {
      set_use_pid(from.use_pid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DecisionConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionConfig::CopyFrom(const DecisionConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionConfig::IsInitialized() const {

  if (has_detection_shoot_config()) {
    if (!this->detection_shoot_config().IsInitialized()) return false;
  }
  if (has_camera_gimbal_transform()) {
    if (!this->camera_gimbal_transform().IsInitialized()) return false;
  }
  return true;
}

void DecisionConfig::Swap(DecisionConfig* other) {
  if (other != this) {
    point_.Swap(&other->point_);
    std::swap(simulate_, other->simulate_);
    std::swap(master_, other->master_);
    std::swap(escape_, other->escape_);
    buff_point_.Swap(&other->buff_point_);
    std::swap(search_limit_, other->search_limit_);
    std::swap(whirl_vel_, other->whirl_vel_);
    std::swap(wing_bot_, other->wing_bot_);
    std::swap(master_bot_, other->master_bot_);
    std::swap(wing_bot_task_point_, other->wing_bot_task_point_);
    search_region_1_.Swap(&other->search_region_1_);
    search_region_2_.Swap(&other->search_region_2_);
    search_region_3_.Swap(&other->search_region_3_);
    search_region_4_.Swap(&other->search_region_4_);
    patrol_region_.Swap(&other->patrol_region_);
    std::swap(shooter_model_config_, other->shooter_model_config_);
    std::swap(robot_id_, other->robot_id_);
    buff_adjust_point_.Swap(&other->buff_adjust_point_);
    std::swap(detection_shoot_config_, other->detection_shoot_config_);
    std::swap(camera_gimbal_transform_, other->camera_gimbal_transform_);
    std::swap(use_pid_, other->use_pid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DecisionConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecisionConfig_descriptor_;
  metadata.reflection = DecisionConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RTS_DECISION

// @@protoc_insertion_point(global_scope)
