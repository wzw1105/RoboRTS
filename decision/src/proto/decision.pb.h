// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decision.proto

#ifndef PROTOBUF_decision_2eproto__INCLUDED
#define PROTOBUF_decision_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace RTS_DECISION {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_decision_2eproto();
void protobuf_AssignDesc_decision_2eproto();
void protobuf_ShutdownFile_decision_2eproto();

class Point;
class EscapeConstraint;
class SearchConstraint;
class ShooterModelConfig;
class WhirlVel;
class MultiRobot;
class CameraGimbalTransform;
class DetectionShootConfig;
class DecisionConfig;

// ===================================================================

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);

  // optional float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);

  // optional float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);

  // optional float roll = 4;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 4;
  inline float roll() const;
  inline void set_roll(float value);

  // optional float pitch = 5;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 5;
  inline float pitch() const;
  inline void set_pitch(float value);

  // optional float yaw = 6;
  inline bool has_yaw() const;
  inline void clear_yaw();
  static const int kYawFieldNumber = 6;
  inline float yaw() const;
  inline void set_yaw(float value);

  // @@protoc_insertion_point(class_scope:RTS_DECISION.Point)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_yaw();
  inline void clear_has_yaw();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_;
  float y_;
  float z_;
  float roll_;
  float pitch_;
  float yaw_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// -------------------------------------------------------------------

class EscapeConstraint : public ::google::protobuf::Message {
 public:
  EscapeConstraint();
  virtual ~EscapeConstraint();

  EscapeConstraint(const EscapeConstraint& from);

  inline EscapeConstraint& operator=(const EscapeConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EscapeConstraint& default_instance();

  void Swap(EscapeConstraint* other);

  // implements Message ----------------------------------------------

  EscapeConstraint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EscapeConstraint& from);
  void MergeFrom(const EscapeConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float left_x_limit = 1;
  inline bool has_left_x_limit() const;
  inline void clear_left_x_limit();
  static const int kLeftXLimitFieldNumber = 1;
  inline float left_x_limit() const;
  inline void set_left_x_limit(float value);

  // optional float right_x_limit = 2;
  inline bool has_right_x_limit() const;
  inline void clear_right_x_limit();
  static const int kRightXLimitFieldNumber = 2;
  inline float right_x_limit() const;
  inline void set_right_x_limit(float value);

  // optional float robot_x_limit = 3;
  inline bool has_robot_x_limit() const;
  inline void clear_robot_x_limit();
  static const int kRobotXLimitFieldNumber = 3;
  inline float robot_x_limit() const;
  inline void set_robot_x_limit(float value);

  // optional float left_random_min_x = 4;
  inline bool has_left_random_min_x() const;
  inline void clear_left_random_min_x();
  static const int kLeftRandomMinXFieldNumber = 4;
  inline float left_random_min_x() const;
  inline void set_left_random_min_x(float value);

  // optional float left_random_max_x = 5;
  inline bool has_left_random_max_x() const;
  inline void clear_left_random_max_x();
  static const int kLeftRandomMaxXFieldNumber = 5;
  inline float left_random_max_x() const;
  inline void set_left_random_max_x(float value);

  // optional float right_random_min_x = 6;
  inline bool has_right_random_min_x() const;
  inline void clear_right_random_min_x();
  static const int kRightRandomMinXFieldNumber = 6;
  inline float right_random_min_x() const;
  inline void set_right_random_min_x(float value);

  // optional float right_random_max_x = 7;
  inline bool has_right_random_max_x() const;
  inline void clear_right_random_max_x();
  static const int kRightRandomMaxXFieldNumber = 7;
  inline float right_random_max_x() const;
  inline void set_right_random_max_x(float value);

  // @@protoc_insertion_point(class_scope:RTS_DECISION.EscapeConstraint)
 private:
  inline void set_has_left_x_limit();
  inline void clear_has_left_x_limit();
  inline void set_has_right_x_limit();
  inline void clear_has_right_x_limit();
  inline void set_has_robot_x_limit();
  inline void clear_has_robot_x_limit();
  inline void set_has_left_random_min_x();
  inline void clear_has_left_random_min_x();
  inline void set_has_left_random_max_x();
  inline void clear_has_left_random_max_x();
  inline void set_has_right_random_min_x();
  inline void clear_has_right_random_min_x();
  inline void set_has_right_random_max_x();
  inline void clear_has_right_random_max_x();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float left_x_limit_;
  float right_x_limit_;
  float robot_x_limit_;
  float left_random_min_x_;
  float left_random_max_x_;
  float right_random_min_x_;
  float right_random_max_x_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static EscapeConstraint* default_instance_;
};
// -------------------------------------------------------------------

class SearchConstraint : public ::google::protobuf::Message {
 public:
  SearchConstraint();
  virtual ~SearchConstraint();

  SearchConstraint(const SearchConstraint& from);

  inline SearchConstraint& operator=(const SearchConstraint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchConstraint& default_instance();

  void Swap(SearchConstraint* other);

  // implements Message ----------------------------------------------

  SearchConstraint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchConstraint& from);
  void MergeFrom(const SearchConstraint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x_limit = 1;
  inline bool has_x_limit() const;
  inline void clear_x_limit();
  static const int kXLimitFieldNumber = 1;
  inline float x_limit() const;
  inline void set_x_limit(float value);

  // optional float y_limit = 2;
  inline bool has_y_limit() const;
  inline void clear_y_limit();
  static const int kYLimitFieldNumber = 2;
  inline float y_limit() const;
  inline void set_y_limit(float value);

  // @@protoc_insertion_point(class_scope:RTS_DECISION.SearchConstraint)
 private:
  inline void set_has_x_limit();
  inline void clear_has_x_limit();
  inline void set_has_y_limit();
  inline void clear_has_y_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float x_limit_;
  float y_limit_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static SearchConstraint* default_instance_;
};
// -------------------------------------------------------------------

class ShooterModelConfig : public ::google::protobuf::Message {
 public:
  ShooterModelConfig();
  virtual ~ShooterModelConfig();

  ShooterModelConfig(const ShooterModelConfig& from);

  inline ShooterModelConfig& operator=(const ShooterModelConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShooterModelConfig& default_instance();

  void Swap(ShooterModelConfig* other);

  // implements Message ----------------------------------------------

  ShooterModelConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShooterModelConfig& from);
  void MergeFrom(const ShooterModelConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float h = 1;
  inline bool has_h() const;
  inline void clear_h();
  static const int kHFieldNumber = 1;
  inline float h() const;
  inline void set_h(float value);

  // optional float GRAVITY = 2;
  inline bool has_gravity() const;
  inline void clear_gravity();
  static const int kGRAVITYFieldNumber = 2;
  inline float gravity() const;
  inline void set_gravity(float value);

  // optional float init_k_ = 3;
  inline bool has_init_k_() const;
  inline void clear_init_k_();
  static const int kInitKFieldNumber = 3;
  inline float init_k_() const;
  inline void set_init_k_(float value);

  // optional float h_adjust = 4;
  inline bool has_h_adjust() const;
  inline void clear_h_adjust();
  static const int kHAdjustFieldNumber = 4;
  inline float h_adjust() const;
  inline void set_h_adjust(float value);

  // optional float shoot_speed = 5;
  inline bool has_shoot_speed() const;
  inline void clear_shoot_speed();
  static const int kShootSpeedFieldNumber = 5;
  inline float shoot_speed() const;
  inline void set_shoot_speed(float value);

  // @@protoc_insertion_point(class_scope:RTS_DECISION.ShooterModelConfig)
 private:
  inline void set_has_h();
  inline void clear_has_h();
  inline void set_has_gravity();
  inline void clear_has_gravity();
  inline void set_has_init_k_();
  inline void clear_has_init_k_();
  inline void set_has_h_adjust();
  inline void clear_has_h_adjust();
  inline void set_has_shoot_speed();
  inline void clear_has_shoot_speed();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float h_;
  float gravity_;
  float init_k__;
  float h_adjust_;
  float shoot_speed_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static ShooterModelConfig* default_instance_;
};
// -------------------------------------------------------------------

class WhirlVel : public ::google::protobuf::Message {
 public:
  WhirlVel();
  virtual ~WhirlVel();

  WhirlVel(const WhirlVel& from);

  inline WhirlVel& operator=(const WhirlVel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WhirlVel& default_instance();

  void Swap(WhirlVel* other);

  // implements Message ----------------------------------------------

  WhirlVel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WhirlVel& from);
  void MergeFrom(const WhirlVel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float angle_x_vel = 1;
  inline bool has_angle_x_vel() const;
  inline void clear_angle_x_vel();
  static const int kAngleXVelFieldNumber = 1;
  inline float angle_x_vel() const;
  inline void set_angle_x_vel(float value);

  // optional float angle_y_vel = 2;
  inline bool has_angle_y_vel() const;
  inline void clear_angle_y_vel();
  static const int kAngleYVelFieldNumber = 2;
  inline float angle_y_vel() const;
  inline void set_angle_y_vel(float value);

  // optional float angle_z_vel = 3;
  inline bool has_angle_z_vel() const;
  inline void clear_angle_z_vel();
  static const int kAngleZVelFieldNumber = 3;
  inline float angle_z_vel() const;
  inline void set_angle_z_vel(float value);

  // @@protoc_insertion_point(class_scope:RTS_DECISION.WhirlVel)
 private:
  inline void set_has_angle_x_vel();
  inline void clear_has_angle_x_vel();
  inline void set_has_angle_y_vel();
  inline void clear_has_angle_y_vel();
  inline void set_has_angle_z_vel();
  inline void clear_has_angle_z_vel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float angle_x_vel_;
  float angle_y_vel_;
  float angle_z_vel_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static WhirlVel* default_instance_;
};
// -------------------------------------------------------------------

class MultiRobot : public ::google::protobuf::Message {
 public:
  MultiRobot();
  virtual ~MultiRobot();

  MultiRobot(const MultiRobot& from);

  inline MultiRobot& operator=(const MultiRobot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiRobot& default_instance();

  void Swap(MultiRobot* other);

  // implements Message ----------------------------------------------

  MultiRobot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MultiRobot& from);
  void MergeFrom(const MultiRobot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RTS_DECISION.Point start_position = 7;
  inline bool has_start_position() const;
  inline void clear_start_position();
  static const int kStartPositionFieldNumber = 7;
  inline const ::RTS_DECISION::Point& start_position() const;
  inline ::RTS_DECISION::Point* mutable_start_position();
  inline ::RTS_DECISION::Point* release_start_position();
  inline void set_allocated_start_position(::RTS_DECISION::Point* start_position);

  // @@protoc_insertion_point(class_scope:RTS_DECISION.MultiRobot)
 private:
  inline void set_has_start_position();
  inline void clear_has_start_position();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::RTS_DECISION::Point* start_position_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static MultiRobot* default_instance_;
};
// -------------------------------------------------------------------

class CameraGimbalTransform : public ::google::protobuf::Message {
 public:
  CameraGimbalTransform();
  virtual ~CameraGimbalTransform();

  CameraGimbalTransform(const CameraGimbalTransform& from);

  inline CameraGimbalTransform& operator=(const CameraGimbalTransform& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CameraGimbalTransform& default_instance();

  void Swap(CameraGimbalTransform* other);

  // implements Message ----------------------------------------------

  CameraGimbalTransform* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CameraGimbalTransform& from);
  void MergeFrom(const CameraGimbalTransform& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float offset_x = 1;
  inline bool has_offset_x() const;
  inline void clear_offset_x();
  static const int kOffsetXFieldNumber = 1;
  inline float offset_x() const;
  inline void set_offset_x(float value);

  // required float offset_y = 2;
  inline bool has_offset_y() const;
  inline void clear_offset_y();
  static const int kOffsetYFieldNumber = 2;
  inline float offset_y() const;
  inline void set_offset_y(float value);

  // required float offset_z = 3;
  inline bool has_offset_z() const;
  inline void clear_offset_z();
  static const int kOffsetZFieldNumber = 3;
  inline float offset_z() const;
  inline void set_offset_z(float value);

  // required float offset_pitch = 4;
  inline bool has_offset_pitch() const;
  inline void clear_offset_pitch();
  static const int kOffsetPitchFieldNumber = 4;
  inline float offset_pitch() const;
  inline void set_offset_pitch(float value);

  // required float offset_yaw = 5;
  inline bool has_offset_yaw() const;
  inline void clear_offset_yaw();
  static const int kOffsetYawFieldNumber = 5;
  inline float offset_yaw() const;
  inline void set_offset_yaw(float value);

  // optional float pinch_param = 6;
  inline bool has_pinch_param() const;
  inline void clear_pinch_param();
  static const int kPinchParamFieldNumber = 6;
  inline float pinch_param() const;
  inline void set_pinch_param(float value);

  // required float yaw_change_threshold = 7;
  inline bool has_yaw_change_threshold() const;
  inline void clear_yaw_change_threshold();
  static const int kYawChangeThresholdFieldNumber = 7;
  inline float yaw_change_threshold() const;
  inline void set_yaw_change_threshold(float value);

  // required float pitch_change_threshold = 8;
  inline bool has_pitch_change_threshold() const;
  inline void clear_pitch_change_threshold();
  static const int kPitchChangeThresholdFieldNumber = 8;
  inline float pitch_change_threshold() const;
  inline void set_pitch_change_threshold(float value);

  // optional float pid_kp = 9;
  inline bool has_pid_kp() const;
  inline void clear_pid_kp();
  static const int kPidKpFieldNumber = 9;
  inline float pid_kp() const;
  inline void set_pid_kp(float value);

  // optional float pid_ki = 10;
  inline bool has_pid_ki() const;
  inline void clear_pid_ki();
  static const int kPidKiFieldNumber = 10;
  inline float pid_ki() const;
  inline void set_pid_ki(float value);

  // optional float pid_kd = 11;
  inline bool has_pid_kd() const;
  inline void clear_pid_kd();
  static const int kPidKdFieldNumber = 11;
  inline float pid_kd() const;
  inline void set_pid_kd(float value);

  // optional float pid_max_out = 12;
  inline bool has_pid_max_out() const;
  inline void clear_pid_max_out();
  static const int kPidMaxOutFieldNumber = 12;
  inline float pid_max_out() const;
  inline void set_pid_max_out(float value);

  // optional float pid_max_iout = 13;
  inline bool has_pid_max_iout() const;
  inline void clear_pid_max_iout();
  static const int kPidMaxIoutFieldNumber = 13;
  inline float pid_max_iout() const;
  inline void set_pid_max_iout(float value);

  // required float offset_y_weight = 14;
  inline bool has_offset_y_weight() const;
  inline void clear_offset_y_weight();
  static const int kOffsetYWeightFieldNumber = 14;
  inline float offset_y_weight() const;
  inline void set_offset_y_weight(float value);

  // @@protoc_insertion_point(class_scope:RTS_DECISION.CameraGimbalTransform)
 private:
  inline void set_has_offset_x();
  inline void clear_has_offset_x();
  inline void set_has_offset_y();
  inline void clear_has_offset_y();
  inline void set_has_offset_z();
  inline void clear_has_offset_z();
  inline void set_has_offset_pitch();
  inline void clear_has_offset_pitch();
  inline void set_has_offset_yaw();
  inline void clear_has_offset_yaw();
  inline void set_has_pinch_param();
  inline void clear_has_pinch_param();
  inline void set_has_yaw_change_threshold();
  inline void clear_has_yaw_change_threshold();
  inline void set_has_pitch_change_threshold();
  inline void clear_has_pitch_change_threshold();
  inline void set_has_pid_kp();
  inline void clear_has_pid_kp();
  inline void set_has_pid_ki();
  inline void clear_has_pid_ki();
  inline void set_has_pid_kd();
  inline void clear_has_pid_kd();
  inline void set_has_pid_max_out();
  inline void clear_has_pid_max_out();
  inline void set_has_pid_max_iout();
  inline void clear_has_pid_max_iout();
  inline void set_has_offset_y_weight();
  inline void clear_has_offset_y_weight();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float offset_x_;
  float offset_y_;
  float offset_z_;
  float offset_pitch_;
  float offset_yaw_;
  float pinch_param_;
  float yaw_change_threshold_;
  float pitch_change_threshold_;
  float pid_kp_;
  float pid_ki_;
  float pid_kd_;
  float pid_max_out_;
  float pid_max_iout_;
  float offset_y_weight_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static CameraGimbalTransform* default_instance_;
};
// -------------------------------------------------------------------

class DetectionShootConfig : public ::google::protobuf::Message {
 public:
  DetectionShootConfig();
  virtual ~DetectionShootConfig();

  DetectionShootConfig(const DetectionShootConfig& from);

  inline DetectionShootConfig& operator=(const DetectionShootConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DetectionShootConfig& default_instance();

  void Swap(DetectionShootConfig* other);

  // implements Message ----------------------------------------------

  DetectionShootConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DetectionShootConfig& from);
  void MergeFrom(const DetectionShootConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float armor_change_threshold = 1;
  inline bool has_armor_change_threshold() const;
  inline void clear_armor_change_threshold();
  static const int kArmorChangeThresholdFieldNumber = 1;
  inline float armor_change_threshold() const;
  inline void set_armor_change_threshold(float value);

  // optional int32 detect_lost_limit = 2;
  inline bool has_detect_lost_limit() const;
  inline void clear_detect_lost_limit();
  static const int kDetectLostLimitFieldNumber = 2;
  inline ::google::protobuf::int32 detect_lost_limit() const;
  inline void set_detect_lost_limit(::google::protobuf::int32 value);

  // optional int32 gimbal_adjust_history_range = 3;
  inline bool has_gimbal_adjust_history_range() const;
  inline void clear_gimbal_adjust_history_range();
  static const int kGimbalAdjustHistoryRangeFieldNumber = 3;
  inline ::google::protobuf::int32 gimbal_adjust_history_range() const;
  inline void set_gimbal_adjust_history_range(::google::protobuf::int32 value);

  // optional int32 armor_detected_history_range = 4;
  inline bool has_armor_detected_history_range() const;
  inline void clear_armor_detected_history_range();
  static const int kArmorDetectedHistoryRangeFieldNumber = 4;
  inline ::google::protobuf::int32 armor_detected_history_range() const;
  inline void set_armor_detected_history_range(::google::protobuf::int32 value);

  // optional int32 armor_detected_history_threshold = 5;
  inline bool has_armor_detected_history_threshold() const;
  inline void clear_armor_detected_history_threshold();
  static const int kArmorDetectedHistoryThresholdFieldNumber = 5;
  inline ::google::protobuf::int32 armor_detected_history_threshold() const;
  inline void set_armor_detected_history_threshold(::google::protobuf::int32 value);

  // optional int32 enemy_detected_history_range = 6;
  inline bool has_enemy_detected_history_range() const;
  inline void clear_enemy_detected_history_range();
  static const int kEnemyDetectedHistoryRangeFieldNumber = 6;
  inline ::google::protobuf::int32 enemy_detected_history_range() const;
  inline void set_enemy_detected_history_range(::google::protobuf::int32 value);

  // optional int32 enemy_detected_history_threshold = 7;
  inline bool has_enemy_detected_history_threshold() const;
  inline void clear_enemy_detected_history_threshold();
  static const int kEnemyDetectedHistoryThresholdFieldNumber = 7;
  inline ::google::protobuf::int32 enemy_detected_history_threshold() const;
  inline void set_enemy_detected_history_threshold(::google::protobuf::int32 value);

  // optional int32 enemy_front_pose_history_range = 8;
  inline bool has_enemy_front_pose_history_range() const;
  inline void clear_enemy_front_pose_history_range();
  static const int kEnemyFrontPoseHistoryRangeFieldNumber = 8;
  inline ::google::protobuf::int32 enemy_front_pose_history_range() const;
  inline void set_enemy_front_pose_history_range(::google::protobuf::int32 value);

  // optional int32 enemy_front_pose_history_threshold = 9;
  inline bool has_enemy_front_pose_history_threshold() const;
  inline void clear_enemy_front_pose_history_threshold();
  static const int kEnemyFrontPoseHistoryThresholdFieldNumber = 9;
  inline ::google::protobuf::int32 enemy_front_pose_history_threshold() const;
  inline void set_enemy_front_pose_history_threshold(::google::protobuf::int32 value);

  // required float shoot_distance_limit = 10;
  inline bool has_shoot_distance_limit() const;
  inline void clear_shoot_distance_limit();
  static const int kShootDistanceLimitFieldNumber = 10;
  inline float shoot_distance_limit() const;
  inline void set_shoot_distance_limit(float value);

  // @@protoc_insertion_point(class_scope:RTS_DECISION.DetectionShootConfig)
 private:
  inline void set_has_armor_change_threshold();
  inline void clear_has_armor_change_threshold();
  inline void set_has_detect_lost_limit();
  inline void clear_has_detect_lost_limit();
  inline void set_has_gimbal_adjust_history_range();
  inline void clear_has_gimbal_adjust_history_range();
  inline void set_has_armor_detected_history_range();
  inline void clear_has_armor_detected_history_range();
  inline void set_has_armor_detected_history_threshold();
  inline void clear_has_armor_detected_history_threshold();
  inline void set_has_enemy_detected_history_range();
  inline void clear_has_enemy_detected_history_range();
  inline void set_has_enemy_detected_history_threshold();
  inline void clear_has_enemy_detected_history_threshold();
  inline void set_has_enemy_front_pose_history_range();
  inline void clear_has_enemy_front_pose_history_range();
  inline void set_has_enemy_front_pose_history_threshold();
  inline void clear_has_enemy_front_pose_history_threshold();
  inline void set_has_shoot_distance_limit();
  inline void clear_has_shoot_distance_limit();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  float armor_change_threshold_;
  ::google::protobuf::int32 detect_lost_limit_;
  ::google::protobuf::int32 gimbal_adjust_history_range_;
  ::google::protobuf::int32 armor_detected_history_range_;
  ::google::protobuf::int32 armor_detected_history_threshold_;
  ::google::protobuf::int32 enemy_detected_history_range_;
  ::google::protobuf::int32 enemy_detected_history_threshold_;
  ::google::protobuf::int32 enemy_front_pose_history_range_;
  ::google::protobuf::int32 enemy_front_pose_history_threshold_;
  float shoot_distance_limit_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static DetectionShootConfig* default_instance_;
};
// -------------------------------------------------------------------

class DecisionConfig : public ::google::protobuf::Message {
 public:
  DecisionConfig();
  virtual ~DecisionConfig();

  DecisionConfig(const DecisionConfig& from);

  inline DecisionConfig& operator=(const DecisionConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DecisionConfig& default_instance();

  void Swap(DecisionConfig* other);

  // implements Message ----------------------------------------------

  DecisionConfig* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DecisionConfig& from);
  void MergeFrom(const DecisionConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RTS_DECISION.Point point = 1;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 1;
  inline const ::RTS_DECISION::Point& point(int index) const;
  inline ::RTS_DECISION::Point* mutable_point(int index);
  inline ::RTS_DECISION::Point* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
      mutable_point();

  // optional bool simulate = 2 [default = false];
  inline bool has_simulate() const;
  inline void clear_simulate();
  static const int kSimulateFieldNumber = 2;
  inline bool simulate() const;
  inline void set_simulate(bool value);

  // optional bool master = 3 [default = false];
  inline bool has_master() const;
  inline void clear_master();
  static const int kMasterFieldNumber = 3;
  inline bool master() const;
  inline void set_master(bool value);

  // optional .RTS_DECISION.EscapeConstraint escape = 4;
  inline bool has_escape() const;
  inline void clear_escape();
  static const int kEscapeFieldNumber = 4;
  inline const ::RTS_DECISION::EscapeConstraint& escape() const;
  inline ::RTS_DECISION::EscapeConstraint* mutable_escape();
  inline ::RTS_DECISION::EscapeConstraint* release_escape();
  inline void set_allocated_escape(::RTS_DECISION::EscapeConstraint* escape);

  // repeated .RTS_DECISION.Point buff_point = 5;
  inline int buff_point_size() const;
  inline void clear_buff_point();
  static const int kBuffPointFieldNumber = 5;
  inline const ::RTS_DECISION::Point& buff_point(int index) const;
  inline ::RTS_DECISION::Point* mutable_buff_point(int index);
  inline ::RTS_DECISION::Point* add_buff_point();
  inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
      buff_point() const;
  inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
      mutable_buff_point();

  // optional .RTS_DECISION.SearchConstraint search_limit = 6;
  inline bool has_search_limit() const;
  inline void clear_search_limit();
  static const int kSearchLimitFieldNumber = 6;
  inline const ::RTS_DECISION::SearchConstraint& search_limit() const;
  inline ::RTS_DECISION::SearchConstraint* mutable_search_limit();
  inline ::RTS_DECISION::SearchConstraint* release_search_limit();
  inline void set_allocated_search_limit(::RTS_DECISION::SearchConstraint* search_limit);

  // optional .RTS_DECISION.WhirlVel whirl_vel = 7;
  inline bool has_whirl_vel() const;
  inline void clear_whirl_vel();
  static const int kWhirlVelFieldNumber = 7;
  inline const ::RTS_DECISION::WhirlVel& whirl_vel() const;
  inline ::RTS_DECISION::WhirlVel* mutable_whirl_vel();
  inline ::RTS_DECISION::WhirlVel* release_whirl_vel();
  inline void set_allocated_whirl_vel(::RTS_DECISION::WhirlVel* whirl_vel);

  // optional .RTS_DECISION.MultiRobot wing_bot = 8;
  inline bool has_wing_bot() const;
  inline void clear_wing_bot();
  static const int kWingBotFieldNumber = 8;
  inline const ::RTS_DECISION::MultiRobot& wing_bot() const;
  inline ::RTS_DECISION::MultiRobot* mutable_wing_bot();
  inline ::RTS_DECISION::MultiRobot* release_wing_bot();
  inline void set_allocated_wing_bot(::RTS_DECISION::MultiRobot* wing_bot);

  // optional .RTS_DECISION.MultiRobot master_bot = 9;
  inline bool has_master_bot() const;
  inline void clear_master_bot();
  static const int kMasterBotFieldNumber = 9;
  inline const ::RTS_DECISION::MultiRobot& master_bot() const;
  inline ::RTS_DECISION::MultiRobot* mutable_master_bot();
  inline ::RTS_DECISION::MultiRobot* release_master_bot();
  inline void set_allocated_master_bot(::RTS_DECISION::MultiRobot* master_bot);

  // optional .RTS_DECISION.Point wing_bot_task_point = 10;
  inline bool has_wing_bot_task_point() const;
  inline void clear_wing_bot_task_point();
  static const int kWingBotTaskPointFieldNumber = 10;
  inline const ::RTS_DECISION::Point& wing_bot_task_point() const;
  inline ::RTS_DECISION::Point* mutable_wing_bot_task_point();
  inline ::RTS_DECISION::Point* release_wing_bot_task_point();
  inline void set_allocated_wing_bot_task_point(::RTS_DECISION::Point* wing_bot_task_point);

  // repeated .RTS_DECISION.Point search_region_1 = 11;
  inline int search_region_1_size() const;
  inline void clear_search_region_1();
  static const int kSearchRegion1FieldNumber = 11;
  inline const ::RTS_DECISION::Point& search_region_1(int index) const;
  inline ::RTS_DECISION::Point* mutable_search_region_1(int index);
  inline ::RTS_DECISION::Point* add_search_region_1();
  inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
      search_region_1() const;
  inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
      mutable_search_region_1();

  // repeated .RTS_DECISION.Point search_region_2 = 12;
  inline int search_region_2_size() const;
  inline void clear_search_region_2();
  static const int kSearchRegion2FieldNumber = 12;
  inline const ::RTS_DECISION::Point& search_region_2(int index) const;
  inline ::RTS_DECISION::Point* mutable_search_region_2(int index);
  inline ::RTS_DECISION::Point* add_search_region_2();
  inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
      search_region_2() const;
  inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
      mutable_search_region_2();

  // repeated .RTS_DECISION.Point search_region_3 = 13;
  inline int search_region_3_size() const;
  inline void clear_search_region_3();
  static const int kSearchRegion3FieldNumber = 13;
  inline const ::RTS_DECISION::Point& search_region_3(int index) const;
  inline ::RTS_DECISION::Point* mutable_search_region_3(int index);
  inline ::RTS_DECISION::Point* add_search_region_3();
  inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
      search_region_3() const;
  inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
      mutable_search_region_3();

  // repeated .RTS_DECISION.Point search_region_4 = 14;
  inline int search_region_4_size() const;
  inline void clear_search_region_4();
  static const int kSearchRegion4FieldNumber = 14;
  inline const ::RTS_DECISION::Point& search_region_4(int index) const;
  inline ::RTS_DECISION::Point* mutable_search_region_4(int index);
  inline ::RTS_DECISION::Point* add_search_region_4();
  inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
      search_region_4() const;
  inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
      mutable_search_region_4();

  // repeated .RTS_DECISION.Point patrol_region = 15;
  inline int patrol_region_size() const;
  inline void clear_patrol_region();
  static const int kPatrolRegionFieldNumber = 15;
  inline const ::RTS_DECISION::Point& patrol_region(int index) const;
  inline ::RTS_DECISION::Point* mutable_patrol_region(int index);
  inline ::RTS_DECISION::Point* add_patrol_region();
  inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
      patrol_region() const;
  inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
      mutable_patrol_region();

  // optional .RTS_DECISION.ShooterModelConfig shooter_model_config = 16;
  inline bool has_shooter_model_config() const;
  inline void clear_shooter_model_config();
  static const int kShooterModelConfigFieldNumber = 16;
  inline const ::RTS_DECISION::ShooterModelConfig& shooter_model_config() const;
  inline ::RTS_DECISION::ShooterModelConfig* mutable_shooter_model_config();
  inline ::RTS_DECISION::ShooterModelConfig* release_shooter_model_config();
  inline void set_allocated_shooter_model_config(::RTS_DECISION::ShooterModelConfig* shooter_model_config);

  // optional int32 robot_id = 17;
  inline bool has_robot_id() const;
  inline void clear_robot_id();
  static const int kRobotIdFieldNumber = 17;
  inline ::google::protobuf::int32 robot_id() const;
  inline void set_robot_id(::google::protobuf::int32 value);

  // repeated .RTS_DECISION.Point buff_adjust_point = 18;
  inline int buff_adjust_point_size() const;
  inline void clear_buff_adjust_point();
  static const int kBuffAdjustPointFieldNumber = 18;
  inline const ::RTS_DECISION::Point& buff_adjust_point(int index) const;
  inline ::RTS_DECISION::Point* mutable_buff_adjust_point(int index);
  inline ::RTS_DECISION::Point* add_buff_adjust_point();
  inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
      buff_adjust_point() const;
  inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
      mutable_buff_adjust_point();

  // optional .RTS_DECISION.DetectionShootConfig detection_shoot_config = 19;
  inline bool has_detection_shoot_config() const;
  inline void clear_detection_shoot_config();
  static const int kDetectionShootConfigFieldNumber = 19;
  inline const ::RTS_DECISION::DetectionShootConfig& detection_shoot_config() const;
  inline ::RTS_DECISION::DetectionShootConfig* mutable_detection_shoot_config();
  inline ::RTS_DECISION::DetectionShootConfig* release_detection_shoot_config();
  inline void set_allocated_detection_shoot_config(::RTS_DECISION::DetectionShootConfig* detection_shoot_config);

  // optional .RTS_DECISION.CameraGimbalTransform camera_gimbal_transform = 20;
  inline bool has_camera_gimbal_transform() const;
  inline void clear_camera_gimbal_transform();
  static const int kCameraGimbalTransformFieldNumber = 20;
  inline const ::RTS_DECISION::CameraGimbalTransform& camera_gimbal_transform() const;
  inline ::RTS_DECISION::CameraGimbalTransform* mutable_camera_gimbal_transform();
  inline ::RTS_DECISION::CameraGimbalTransform* release_camera_gimbal_transform();
  inline void set_allocated_camera_gimbal_transform(::RTS_DECISION::CameraGimbalTransform* camera_gimbal_transform);

  // optional bool use_pid = 21;
  inline bool has_use_pid() const;
  inline void clear_use_pid();
  static const int kUsePidFieldNumber = 21;
  inline bool use_pid() const;
  inline void set_use_pid(bool value);

  // @@protoc_insertion_point(class_scope:RTS_DECISION.DecisionConfig)
 private:
  inline void set_has_simulate();
  inline void clear_has_simulate();
  inline void set_has_master();
  inline void clear_has_master();
  inline void set_has_escape();
  inline void clear_has_escape();
  inline void set_has_search_limit();
  inline void clear_has_search_limit();
  inline void set_has_whirl_vel();
  inline void clear_has_whirl_vel();
  inline void set_has_wing_bot();
  inline void clear_has_wing_bot();
  inline void set_has_master_bot();
  inline void clear_has_master_bot();
  inline void set_has_wing_bot_task_point();
  inline void clear_has_wing_bot_task_point();
  inline void set_has_shooter_model_config();
  inline void clear_has_shooter_model_config();
  inline void set_has_robot_id();
  inline void clear_has_robot_id();
  inline void set_has_detection_shoot_config();
  inline void clear_has_detection_shoot_config();
  inline void set_has_camera_gimbal_transform();
  inline void clear_has_camera_gimbal_transform();
  inline void set_has_use_pid();
  inline void clear_has_use_pid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point > point_;
  ::RTS_DECISION::EscapeConstraint* escape_;
  ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point > buff_point_;
  ::RTS_DECISION::SearchConstraint* search_limit_;
  ::RTS_DECISION::WhirlVel* whirl_vel_;
  ::RTS_DECISION::MultiRobot* wing_bot_;
  ::RTS_DECISION::MultiRobot* master_bot_;
  ::RTS_DECISION::Point* wing_bot_task_point_;
  bool simulate_;
  bool master_;
  bool use_pid_;
  ::google::protobuf::int32 robot_id_;
  ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point > search_region_1_;
  ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point > search_region_2_;
  ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point > search_region_3_;
  ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point > search_region_4_;
  ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point > patrol_region_;
  ::RTS_DECISION::ShooterModelConfig* shooter_model_config_;
  ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point > buff_adjust_point_;
  ::RTS_DECISION::DetectionShootConfig* detection_shoot_config_;
  ::RTS_DECISION::CameraGimbalTransform* camera_gimbal_transform_;
  friend void  protobuf_AddDesc_decision_2eproto();
  friend void protobuf_AssignDesc_decision_2eproto();
  friend void protobuf_ShutdownFile_decision_2eproto();

  void InitAsDefaultInstance();
  static DecisionConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// Point

// optional float x = 1;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Point::x() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.Point.x)
  return x_;
}
inline void Point::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.Point.x)
}

// optional float y = 2;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Point::y() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.Point.y)
  return y_;
}
inline void Point::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.Point.y)
}

// optional float z = 3;
inline bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Point::z() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.Point.z)
  return z_;
}
inline void Point::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.Point.z)
}

// optional float roll = 4;
inline bool Point::has_roll() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Point::set_has_roll() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Point::clear_has_roll() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Point::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline float Point::roll() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.Point.roll)
  return roll_;
}
inline void Point::set_roll(float value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.Point.roll)
}

// optional float pitch = 5;
inline bool Point::has_pitch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Point::set_has_pitch() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Point::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Point::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline float Point::pitch() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.Point.pitch)
  return pitch_;
}
inline void Point::set_pitch(float value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.Point.pitch)
}

// optional float yaw = 6;
inline bool Point::has_yaw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Point::set_has_yaw() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Point::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Point::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
inline float Point::yaw() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.Point.yaw)
  return yaw_;
}
inline void Point::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.Point.yaw)
}

// -------------------------------------------------------------------

// EscapeConstraint

// optional float left_x_limit = 1;
inline bool EscapeConstraint::has_left_x_limit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EscapeConstraint::set_has_left_x_limit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EscapeConstraint::clear_has_left_x_limit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EscapeConstraint::clear_left_x_limit() {
  left_x_limit_ = 0;
  clear_has_left_x_limit();
}
inline float EscapeConstraint::left_x_limit() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.EscapeConstraint.left_x_limit)
  return left_x_limit_;
}
inline void EscapeConstraint::set_left_x_limit(float value) {
  set_has_left_x_limit();
  left_x_limit_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.EscapeConstraint.left_x_limit)
}

// optional float right_x_limit = 2;
inline bool EscapeConstraint::has_right_x_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EscapeConstraint::set_has_right_x_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EscapeConstraint::clear_has_right_x_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EscapeConstraint::clear_right_x_limit() {
  right_x_limit_ = 0;
  clear_has_right_x_limit();
}
inline float EscapeConstraint::right_x_limit() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.EscapeConstraint.right_x_limit)
  return right_x_limit_;
}
inline void EscapeConstraint::set_right_x_limit(float value) {
  set_has_right_x_limit();
  right_x_limit_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.EscapeConstraint.right_x_limit)
}

// optional float robot_x_limit = 3;
inline bool EscapeConstraint::has_robot_x_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EscapeConstraint::set_has_robot_x_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EscapeConstraint::clear_has_robot_x_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EscapeConstraint::clear_robot_x_limit() {
  robot_x_limit_ = 0;
  clear_has_robot_x_limit();
}
inline float EscapeConstraint::robot_x_limit() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.EscapeConstraint.robot_x_limit)
  return robot_x_limit_;
}
inline void EscapeConstraint::set_robot_x_limit(float value) {
  set_has_robot_x_limit();
  robot_x_limit_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.EscapeConstraint.robot_x_limit)
}

// optional float left_random_min_x = 4;
inline bool EscapeConstraint::has_left_random_min_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EscapeConstraint::set_has_left_random_min_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EscapeConstraint::clear_has_left_random_min_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EscapeConstraint::clear_left_random_min_x() {
  left_random_min_x_ = 0;
  clear_has_left_random_min_x();
}
inline float EscapeConstraint::left_random_min_x() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.EscapeConstraint.left_random_min_x)
  return left_random_min_x_;
}
inline void EscapeConstraint::set_left_random_min_x(float value) {
  set_has_left_random_min_x();
  left_random_min_x_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.EscapeConstraint.left_random_min_x)
}

// optional float left_random_max_x = 5;
inline bool EscapeConstraint::has_left_random_max_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EscapeConstraint::set_has_left_random_max_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EscapeConstraint::clear_has_left_random_max_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EscapeConstraint::clear_left_random_max_x() {
  left_random_max_x_ = 0;
  clear_has_left_random_max_x();
}
inline float EscapeConstraint::left_random_max_x() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.EscapeConstraint.left_random_max_x)
  return left_random_max_x_;
}
inline void EscapeConstraint::set_left_random_max_x(float value) {
  set_has_left_random_max_x();
  left_random_max_x_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.EscapeConstraint.left_random_max_x)
}

// optional float right_random_min_x = 6;
inline bool EscapeConstraint::has_right_random_min_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void EscapeConstraint::set_has_right_random_min_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void EscapeConstraint::clear_has_right_random_min_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void EscapeConstraint::clear_right_random_min_x() {
  right_random_min_x_ = 0;
  clear_has_right_random_min_x();
}
inline float EscapeConstraint::right_random_min_x() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.EscapeConstraint.right_random_min_x)
  return right_random_min_x_;
}
inline void EscapeConstraint::set_right_random_min_x(float value) {
  set_has_right_random_min_x();
  right_random_min_x_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.EscapeConstraint.right_random_min_x)
}

// optional float right_random_max_x = 7;
inline bool EscapeConstraint::has_right_random_max_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void EscapeConstraint::set_has_right_random_max_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void EscapeConstraint::clear_has_right_random_max_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void EscapeConstraint::clear_right_random_max_x() {
  right_random_max_x_ = 0;
  clear_has_right_random_max_x();
}
inline float EscapeConstraint::right_random_max_x() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.EscapeConstraint.right_random_max_x)
  return right_random_max_x_;
}
inline void EscapeConstraint::set_right_random_max_x(float value) {
  set_has_right_random_max_x();
  right_random_max_x_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.EscapeConstraint.right_random_max_x)
}

// -------------------------------------------------------------------

// SearchConstraint

// optional float x_limit = 1;
inline bool SearchConstraint::has_x_limit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SearchConstraint::set_has_x_limit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SearchConstraint::clear_has_x_limit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SearchConstraint::clear_x_limit() {
  x_limit_ = 0;
  clear_has_x_limit();
}
inline float SearchConstraint::x_limit() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.SearchConstraint.x_limit)
  return x_limit_;
}
inline void SearchConstraint::set_x_limit(float value) {
  set_has_x_limit();
  x_limit_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.SearchConstraint.x_limit)
}

// optional float y_limit = 2;
inline bool SearchConstraint::has_y_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SearchConstraint::set_has_y_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SearchConstraint::clear_has_y_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SearchConstraint::clear_y_limit() {
  y_limit_ = 0;
  clear_has_y_limit();
}
inline float SearchConstraint::y_limit() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.SearchConstraint.y_limit)
  return y_limit_;
}
inline void SearchConstraint::set_y_limit(float value) {
  set_has_y_limit();
  y_limit_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.SearchConstraint.y_limit)
}

// -------------------------------------------------------------------

// ShooterModelConfig

// optional float h = 1;
inline bool ShooterModelConfig::has_h() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShooterModelConfig::set_has_h() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShooterModelConfig::clear_has_h() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShooterModelConfig::clear_h() {
  h_ = 0;
  clear_has_h();
}
inline float ShooterModelConfig::h() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.ShooterModelConfig.h)
  return h_;
}
inline void ShooterModelConfig::set_h(float value) {
  set_has_h();
  h_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.ShooterModelConfig.h)
}

// optional float GRAVITY = 2;
inline bool ShooterModelConfig::has_gravity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShooterModelConfig::set_has_gravity() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShooterModelConfig::clear_has_gravity() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShooterModelConfig::clear_gravity() {
  gravity_ = 0;
  clear_has_gravity();
}
inline float ShooterModelConfig::gravity() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.ShooterModelConfig.GRAVITY)
  return gravity_;
}
inline void ShooterModelConfig::set_gravity(float value) {
  set_has_gravity();
  gravity_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.ShooterModelConfig.GRAVITY)
}

// optional float init_k_ = 3;
inline bool ShooterModelConfig::has_init_k_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShooterModelConfig::set_has_init_k_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShooterModelConfig::clear_has_init_k_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShooterModelConfig::clear_init_k_() {
  init_k__ = 0;
  clear_has_init_k_();
}
inline float ShooterModelConfig::init_k_() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.ShooterModelConfig.init_k_)
  return init_k__;
}
inline void ShooterModelConfig::set_init_k_(float value) {
  set_has_init_k_();
  init_k__ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.ShooterModelConfig.init_k_)
}

// optional float h_adjust = 4;
inline bool ShooterModelConfig::has_h_adjust() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShooterModelConfig::set_has_h_adjust() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShooterModelConfig::clear_has_h_adjust() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShooterModelConfig::clear_h_adjust() {
  h_adjust_ = 0;
  clear_has_h_adjust();
}
inline float ShooterModelConfig::h_adjust() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.ShooterModelConfig.h_adjust)
  return h_adjust_;
}
inline void ShooterModelConfig::set_h_adjust(float value) {
  set_has_h_adjust();
  h_adjust_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.ShooterModelConfig.h_adjust)
}

// optional float shoot_speed = 5;
inline bool ShooterModelConfig::has_shoot_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShooterModelConfig::set_has_shoot_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShooterModelConfig::clear_has_shoot_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShooterModelConfig::clear_shoot_speed() {
  shoot_speed_ = 0;
  clear_has_shoot_speed();
}
inline float ShooterModelConfig::shoot_speed() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.ShooterModelConfig.shoot_speed)
  return shoot_speed_;
}
inline void ShooterModelConfig::set_shoot_speed(float value) {
  set_has_shoot_speed();
  shoot_speed_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.ShooterModelConfig.shoot_speed)
}

// -------------------------------------------------------------------

// WhirlVel

// optional float angle_x_vel = 1;
inline bool WhirlVel::has_angle_x_vel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WhirlVel::set_has_angle_x_vel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WhirlVel::clear_has_angle_x_vel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WhirlVel::clear_angle_x_vel() {
  angle_x_vel_ = 0;
  clear_has_angle_x_vel();
}
inline float WhirlVel::angle_x_vel() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.WhirlVel.angle_x_vel)
  return angle_x_vel_;
}
inline void WhirlVel::set_angle_x_vel(float value) {
  set_has_angle_x_vel();
  angle_x_vel_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.WhirlVel.angle_x_vel)
}

// optional float angle_y_vel = 2;
inline bool WhirlVel::has_angle_y_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WhirlVel::set_has_angle_y_vel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WhirlVel::clear_has_angle_y_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WhirlVel::clear_angle_y_vel() {
  angle_y_vel_ = 0;
  clear_has_angle_y_vel();
}
inline float WhirlVel::angle_y_vel() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.WhirlVel.angle_y_vel)
  return angle_y_vel_;
}
inline void WhirlVel::set_angle_y_vel(float value) {
  set_has_angle_y_vel();
  angle_y_vel_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.WhirlVel.angle_y_vel)
}

// optional float angle_z_vel = 3;
inline bool WhirlVel::has_angle_z_vel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WhirlVel::set_has_angle_z_vel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WhirlVel::clear_has_angle_z_vel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WhirlVel::clear_angle_z_vel() {
  angle_z_vel_ = 0;
  clear_has_angle_z_vel();
}
inline float WhirlVel::angle_z_vel() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.WhirlVel.angle_z_vel)
  return angle_z_vel_;
}
inline void WhirlVel::set_angle_z_vel(float value) {
  set_has_angle_z_vel();
  angle_z_vel_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.WhirlVel.angle_z_vel)
}

// -------------------------------------------------------------------

// MultiRobot

// optional .RTS_DECISION.Point start_position = 7;
inline bool MultiRobot::has_start_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MultiRobot::set_has_start_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MultiRobot::clear_has_start_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MultiRobot::clear_start_position() {
  if (start_position_ != NULL) start_position_->::RTS_DECISION::Point::Clear();
  clear_has_start_position();
}
inline const ::RTS_DECISION::Point& MultiRobot::start_position() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.MultiRobot.start_position)
  return start_position_ != NULL ? *start_position_ : *default_instance_->start_position_;
}
inline ::RTS_DECISION::Point* MultiRobot::mutable_start_position() {
  set_has_start_position();
  if (start_position_ == NULL) start_position_ = new ::RTS_DECISION::Point;
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.MultiRobot.start_position)
  return start_position_;
}
inline ::RTS_DECISION::Point* MultiRobot::release_start_position() {
  clear_has_start_position();
  ::RTS_DECISION::Point* temp = start_position_;
  start_position_ = NULL;
  return temp;
}
inline void MultiRobot::set_allocated_start_position(::RTS_DECISION::Point* start_position) {
  delete start_position_;
  start_position_ = start_position;
  if (start_position) {
    set_has_start_position();
  } else {
    clear_has_start_position();
  }
  // @@protoc_insertion_point(field_set_allocated:RTS_DECISION.MultiRobot.start_position)
}

// -------------------------------------------------------------------

// CameraGimbalTransform

// required float offset_x = 1;
inline bool CameraGimbalTransform::has_offset_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CameraGimbalTransform::set_has_offset_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CameraGimbalTransform::clear_has_offset_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CameraGimbalTransform::clear_offset_x() {
  offset_x_ = 0;
  clear_has_offset_x();
}
inline float CameraGimbalTransform::offset_x() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.CameraGimbalTransform.offset_x)
  return offset_x_;
}
inline void CameraGimbalTransform::set_offset_x(float value) {
  set_has_offset_x();
  offset_x_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.CameraGimbalTransform.offset_x)
}

// required float offset_y = 2;
inline bool CameraGimbalTransform::has_offset_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CameraGimbalTransform::set_has_offset_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CameraGimbalTransform::clear_has_offset_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CameraGimbalTransform::clear_offset_y() {
  offset_y_ = 0;
  clear_has_offset_y();
}
inline float CameraGimbalTransform::offset_y() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.CameraGimbalTransform.offset_y)
  return offset_y_;
}
inline void CameraGimbalTransform::set_offset_y(float value) {
  set_has_offset_y();
  offset_y_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.CameraGimbalTransform.offset_y)
}

// required float offset_z = 3;
inline bool CameraGimbalTransform::has_offset_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CameraGimbalTransform::set_has_offset_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CameraGimbalTransform::clear_has_offset_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CameraGimbalTransform::clear_offset_z() {
  offset_z_ = 0;
  clear_has_offset_z();
}
inline float CameraGimbalTransform::offset_z() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.CameraGimbalTransform.offset_z)
  return offset_z_;
}
inline void CameraGimbalTransform::set_offset_z(float value) {
  set_has_offset_z();
  offset_z_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.CameraGimbalTransform.offset_z)
}

// required float offset_pitch = 4;
inline bool CameraGimbalTransform::has_offset_pitch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CameraGimbalTransform::set_has_offset_pitch() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CameraGimbalTransform::clear_has_offset_pitch() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CameraGimbalTransform::clear_offset_pitch() {
  offset_pitch_ = 0;
  clear_has_offset_pitch();
}
inline float CameraGimbalTransform::offset_pitch() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.CameraGimbalTransform.offset_pitch)
  return offset_pitch_;
}
inline void CameraGimbalTransform::set_offset_pitch(float value) {
  set_has_offset_pitch();
  offset_pitch_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.CameraGimbalTransform.offset_pitch)
}

// required float offset_yaw = 5;
inline bool CameraGimbalTransform::has_offset_yaw() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CameraGimbalTransform::set_has_offset_yaw() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CameraGimbalTransform::clear_has_offset_yaw() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CameraGimbalTransform::clear_offset_yaw() {
  offset_yaw_ = 0;
  clear_has_offset_yaw();
}
inline float CameraGimbalTransform::offset_yaw() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.CameraGimbalTransform.offset_yaw)
  return offset_yaw_;
}
inline void CameraGimbalTransform::set_offset_yaw(float value) {
  set_has_offset_yaw();
  offset_yaw_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.CameraGimbalTransform.offset_yaw)
}

// optional float pinch_param = 6;
inline bool CameraGimbalTransform::has_pinch_param() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CameraGimbalTransform::set_has_pinch_param() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CameraGimbalTransform::clear_has_pinch_param() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CameraGimbalTransform::clear_pinch_param() {
  pinch_param_ = 0;
  clear_has_pinch_param();
}
inline float CameraGimbalTransform::pinch_param() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.CameraGimbalTransform.pinch_param)
  return pinch_param_;
}
inline void CameraGimbalTransform::set_pinch_param(float value) {
  set_has_pinch_param();
  pinch_param_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.CameraGimbalTransform.pinch_param)
}

// required float yaw_change_threshold = 7;
inline bool CameraGimbalTransform::has_yaw_change_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CameraGimbalTransform::set_has_yaw_change_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CameraGimbalTransform::clear_has_yaw_change_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CameraGimbalTransform::clear_yaw_change_threshold() {
  yaw_change_threshold_ = 0;
  clear_has_yaw_change_threshold();
}
inline float CameraGimbalTransform::yaw_change_threshold() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.CameraGimbalTransform.yaw_change_threshold)
  return yaw_change_threshold_;
}
inline void CameraGimbalTransform::set_yaw_change_threshold(float value) {
  set_has_yaw_change_threshold();
  yaw_change_threshold_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.CameraGimbalTransform.yaw_change_threshold)
}

// required float pitch_change_threshold = 8;
inline bool CameraGimbalTransform::has_pitch_change_threshold() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CameraGimbalTransform::set_has_pitch_change_threshold() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CameraGimbalTransform::clear_has_pitch_change_threshold() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CameraGimbalTransform::clear_pitch_change_threshold() {
  pitch_change_threshold_ = 0;
  clear_has_pitch_change_threshold();
}
inline float CameraGimbalTransform::pitch_change_threshold() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.CameraGimbalTransform.pitch_change_threshold)
  return pitch_change_threshold_;
}
inline void CameraGimbalTransform::set_pitch_change_threshold(float value) {
  set_has_pitch_change_threshold();
  pitch_change_threshold_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.CameraGimbalTransform.pitch_change_threshold)
}

// optional float pid_kp = 9;
inline bool CameraGimbalTransform::has_pid_kp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CameraGimbalTransform::set_has_pid_kp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CameraGimbalTransform::clear_has_pid_kp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CameraGimbalTransform::clear_pid_kp() {
  pid_kp_ = 0;
  clear_has_pid_kp();
}
inline float CameraGimbalTransform::pid_kp() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.CameraGimbalTransform.pid_kp)
  return pid_kp_;
}
inline void CameraGimbalTransform::set_pid_kp(float value) {
  set_has_pid_kp();
  pid_kp_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.CameraGimbalTransform.pid_kp)
}

// optional float pid_ki = 10;
inline bool CameraGimbalTransform::has_pid_ki() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CameraGimbalTransform::set_has_pid_ki() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CameraGimbalTransform::clear_has_pid_ki() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CameraGimbalTransform::clear_pid_ki() {
  pid_ki_ = 0;
  clear_has_pid_ki();
}
inline float CameraGimbalTransform::pid_ki() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.CameraGimbalTransform.pid_ki)
  return pid_ki_;
}
inline void CameraGimbalTransform::set_pid_ki(float value) {
  set_has_pid_ki();
  pid_ki_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.CameraGimbalTransform.pid_ki)
}

// optional float pid_kd = 11;
inline bool CameraGimbalTransform::has_pid_kd() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CameraGimbalTransform::set_has_pid_kd() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CameraGimbalTransform::clear_has_pid_kd() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CameraGimbalTransform::clear_pid_kd() {
  pid_kd_ = 0;
  clear_has_pid_kd();
}
inline float CameraGimbalTransform::pid_kd() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.CameraGimbalTransform.pid_kd)
  return pid_kd_;
}
inline void CameraGimbalTransform::set_pid_kd(float value) {
  set_has_pid_kd();
  pid_kd_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.CameraGimbalTransform.pid_kd)
}

// optional float pid_max_out = 12;
inline bool CameraGimbalTransform::has_pid_max_out() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CameraGimbalTransform::set_has_pid_max_out() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CameraGimbalTransform::clear_has_pid_max_out() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CameraGimbalTransform::clear_pid_max_out() {
  pid_max_out_ = 0;
  clear_has_pid_max_out();
}
inline float CameraGimbalTransform::pid_max_out() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.CameraGimbalTransform.pid_max_out)
  return pid_max_out_;
}
inline void CameraGimbalTransform::set_pid_max_out(float value) {
  set_has_pid_max_out();
  pid_max_out_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.CameraGimbalTransform.pid_max_out)
}

// optional float pid_max_iout = 13;
inline bool CameraGimbalTransform::has_pid_max_iout() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CameraGimbalTransform::set_has_pid_max_iout() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CameraGimbalTransform::clear_has_pid_max_iout() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CameraGimbalTransform::clear_pid_max_iout() {
  pid_max_iout_ = 0;
  clear_has_pid_max_iout();
}
inline float CameraGimbalTransform::pid_max_iout() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.CameraGimbalTransform.pid_max_iout)
  return pid_max_iout_;
}
inline void CameraGimbalTransform::set_pid_max_iout(float value) {
  set_has_pid_max_iout();
  pid_max_iout_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.CameraGimbalTransform.pid_max_iout)
}

// required float offset_y_weight = 14;
inline bool CameraGimbalTransform::has_offset_y_weight() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CameraGimbalTransform::set_has_offset_y_weight() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CameraGimbalTransform::clear_has_offset_y_weight() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CameraGimbalTransform::clear_offset_y_weight() {
  offset_y_weight_ = 0;
  clear_has_offset_y_weight();
}
inline float CameraGimbalTransform::offset_y_weight() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.CameraGimbalTransform.offset_y_weight)
  return offset_y_weight_;
}
inline void CameraGimbalTransform::set_offset_y_weight(float value) {
  set_has_offset_y_weight();
  offset_y_weight_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.CameraGimbalTransform.offset_y_weight)
}

// -------------------------------------------------------------------

// DetectionShootConfig

// optional float armor_change_threshold = 1;
inline bool DetectionShootConfig::has_armor_change_threshold() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DetectionShootConfig::set_has_armor_change_threshold() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DetectionShootConfig::clear_has_armor_change_threshold() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DetectionShootConfig::clear_armor_change_threshold() {
  armor_change_threshold_ = 0;
  clear_has_armor_change_threshold();
}
inline float DetectionShootConfig::armor_change_threshold() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DetectionShootConfig.armor_change_threshold)
  return armor_change_threshold_;
}
inline void DetectionShootConfig::set_armor_change_threshold(float value) {
  set_has_armor_change_threshold();
  armor_change_threshold_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.DetectionShootConfig.armor_change_threshold)
}

// optional int32 detect_lost_limit = 2;
inline bool DetectionShootConfig::has_detect_lost_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DetectionShootConfig::set_has_detect_lost_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DetectionShootConfig::clear_has_detect_lost_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DetectionShootConfig::clear_detect_lost_limit() {
  detect_lost_limit_ = 0;
  clear_has_detect_lost_limit();
}
inline ::google::protobuf::int32 DetectionShootConfig::detect_lost_limit() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DetectionShootConfig.detect_lost_limit)
  return detect_lost_limit_;
}
inline void DetectionShootConfig::set_detect_lost_limit(::google::protobuf::int32 value) {
  set_has_detect_lost_limit();
  detect_lost_limit_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.DetectionShootConfig.detect_lost_limit)
}

// optional int32 gimbal_adjust_history_range = 3;
inline bool DetectionShootConfig::has_gimbal_adjust_history_range() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DetectionShootConfig::set_has_gimbal_adjust_history_range() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DetectionShootConfig::clear_has_gimbal_adjust_history_range() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DetectionShootConfig::clear_gimbal_adjust_history_range() {
  gimbal_adjust_history_range_ = 0;
  clear_has_gimbal_adjust_history_range();
}
inline ::google::protobuf::int32 DetectionShootConfig::gimbal_adjust_history_range() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DetectionShootConfig.gimbal_adjust_history_range)
  return gimbal_adjust_history_range_;
}
inline void DetectionShootConfig::set_gimbal_adjust_history_range(::google::protobuf::int32 value) {
  set_has_gimbal_adjust_history_range();
  gimbal_adjust_history_range_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.DetectionShootConfig.gimbal_adjust_history_range)
}

// optional int32 armor_detected_history_range = 4;
inline bool DetectionShootConfig::has_armor_detected_history_range() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DetectionShootConfig::set_has_armor_detected_history_range() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DetectionShootConfig::clear_has_armor_detected_history_range() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DetectionShootConfig::clear_armor_detected_history_range() {
  armor_detected_history_range_ = 0;
  clear_has_armor_detected_history_range();
}
inline ::google::protobuf::int32 DetectionShootConfig::armor_detected_history_range() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DetectionShootConfig.armor_detected_history_range)
  return armor_detected_history_range_;
}
inline void DetectionShootConfig::set_armor_detected_history_range(::google::protobuf::int32 value) {
  set_has_armor_detected_history_range();
  armor_detected_history_range_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.DetectionShootConfig.armor_detected_history_range)
}

// optional int32 armor_detected_history_threshold = 5;
inline bool DetectionShootConfig::has_armor_detected_history_threshold() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DetectionShootConfig::set_has_armor_detected_history_threshold() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DetectionShootConfig::clear_has_armor_detected_history_threshold() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DetectionShootConfig::clear_armor_detected_history_threshold() {
  armor_detected_history_threshold_ = 0;
  clear_has_armor_detected_history_threshold();
}
inline ::google::protobuf::int32 DetectionShootConfig::armor_detected_history_threshold() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DetectionShootConfig.armor_detected_history_threshold)
  return armor_detected_history_threshold_;
}
inline void DetectionShootConfig::set_armor_detected_history_threshold(::google::protobuf::int32 value) {
  set_has_armor_detected_history_threshold();
  armor_detected_history_threshold_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.DetectionShootConfig.armor_detected_history_threshold)
}

// optional int32 enemy_detected_history_range = 6;
inline bool DetectionShootConfig::has_enemy_detected_history_range() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DetectionShootConfig::set_has_enemy_detected_history_range() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DetectionShootConfig::clear_has_enemy_detected_history_range() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DetectionShootConfig::clear_enemy_detected_history_range() {
  enemy_detected_history_range_ = 0;
  clear_has_enemy_detected_history_range();
}
inline ::google::protobuf::int32 DetectionShootConfig::enemy_detected_history_range() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DetectionShootConfig.enemy_detected_history_range)
  return enemy_detected_history_range_;
}
inline void DetectionShootConfig::set_enemy_detected_history_range(::google::protobuf::int32 value) {
  set_has_enemy_detected_history_range();
  enemy_detected_history_range_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.DetectionShootConfig.enemy_detected_history_range)
}

// optional int32 enemy_detected_history_threshold = 7;
inline bool DetectionShootConfig::has_enemy_detected_history_threshold() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DetectionShootConfig::set_has_enemy_detected_history_threshold() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DetectionShootConfig::clear_has_enemy_detected_history_threshold() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DetectionShootConfig::clear_enemy_detected_history_threshold() {
  enemy_detected_history_threshold_ = 0;
  clear_has_enemy_detected_history_threshold();
}
inline ::google::protobuf::int32 DetectionShootConfig::enemy_detected_history_threshold() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DetectionShootConfig.enemy_detected_history_threshold)
  return enemy_detected_history_threshold_;
}
inline void DetectionShootConfig::set_enemy_detected_history_threshold(::google::protobuf::int32 value) {
  set_has_enemy_detected_history_threshold();
  enemy_detected_history_threshold_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.DetectionShootConfig.enemy_detected_history_threshold)
}

// optional int32 enemy_front_pose_history_range = 8;
inline bool DetectionShootConfig::has_enemy_front_pose_history_range() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DetectionShootConfig::set_has_enemy_front_pose_history_range() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DetectionShootConfig::clear_has_enemy_front_pose_history_range() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DetectionShootConfig::clear_enemy_front_pose_history_range() {
  enemy_front_pose_history_range_ = 0;
  clear_has_enemy_front_pose_history_range();
}
inline ::google::protobuf::int32 DetectionShootConfig::enemy_front_pose_history_range() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DetectionShootConfig.enemy_front_pose_history_range)
  return enemy_front_pose_history_range_;
}
inline void DetectionShootConfig::set_enemy_front_pose_history_range(::google::protobuf::int32 value) {
  set_has_enemy_front_pose_history_range();
  enemy_front_pose_history_range_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.DetectionShootConfig.enemy_front_pose_history_range)
}

// optional int32 enemy_front_pose_history_threshold = 9;
inline bool DetectionShootConfig::has_enemy_front_pose_history_threshold() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DetectionShootConfig::set_has_enemy_front_pose_history_threshold() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DetectionShootConfig::clear_has_enemy_front_pose_history_threshold() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DetectionShootConfig::clear_enemy_front_pose_history_threshold() {
  enemy_front_pose_history_threshold_ = 0;
  clear_has_enemy_front_pose_history_threshold();
}
inline ::google::protobuf::int32 DetectionShootConfig::enemy_front_pose_history_threshold() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DetectionShootConfig.enemy_front_pose_history_threshold)
  return enemy_front_pose_history_threshold_;
}
inline void DetectionShootConfig::set_enemy_front_pose_history_threshold(::google::protobuf::int32 value) {
  set_has_enemy_front_pose_history_threshold();
  enemy_front_pose_history_threshold_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.DetectionShootConfig.enemy_front_pose_history_threshold)
}

// required float shoot_distance_limit = 10;
inline bool DetectionShootConfig::has_shoot_distance_limit() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DetectionShootConfig::set_has_shoot_distance_limit() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DetectionShootConfig::clear_has_shoot_distance_limit() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DetectionShootConfig::clear_shoot_distance_limit() {
  shoot_distance_limit_ = 0;
  clear_has_shoot_distance_limit();
}
inline float DetectionShootConfig::shoot_distance_limit() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DetectionShootConfig.shoot_distance_limit)
  return shoot_distance_limit_;
}
inline void DetectionShootConfig::set_shoot_distance_limit(float value) {
  set_has_shoot_distance_limit();
  shoot_distance_limit_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.DetectionShootConfig.shoot_distance_limit)
}

// -------------------------------------------------------------------

// DecisionConfig

// repeated .RTS_DECISION.Point point = 1;
inline int DecisionConfig::point_size() const {
  return point_.size();
}
inline void DecisionConfig::clear_point() {
  point_.Clear();
}
inline const ::RTS_DECISION::Point& DecisionConfig::point(int index) const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.point)
  return point_.Get(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.point)
  return point_.Mutable(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::add_point() {
  // @@protoc_insertion_point(field_add:RTS_DECISION.DecisionConfig.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
DecisionConfig::point() const {
  // @@protoc_insertion_point(field_list:RTS_DECISION.DecisionConfig.point)
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
DecisionConfig::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:RTS_DECISION.DecisionConfig.point)
  return &point_;
}

// optional bool simulate = 2 [default = false];
inline bool DecisionConfig::has_simulate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DecisionConfig::set_has_simulate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DecisionConfig::clear_has_simulate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DecisionConfig::clear_simulate() {
  simulate_ = false;
  clear_has_simulate();
}
inline bool DecisionConfig::simulate() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.simulate)
  return simulate_;
}
inline void DecisionConfig::set_simulate(bool value) {
  set_has_simulate();
  simulate_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.DecisionConfig.simulate)
}

// optional bool master = 3 [default = false];
inline bool DecisionConfig::has_master() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DecisionConfig::set_has_master() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DecisionConfig::clear_has_master() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DecisionConfig::clear_master() {
  master_ = false;
  clear_has_master();
}
inline bool DecisionConfig::master() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.master)
  return master_;
}
inline void DecisionConfig::set_master(bool value) {
  set_has_master();
  master_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.DecisionConfig.master)
}

// optional .RTS_DECISION.EscapeConstraint escape = 4;
inline bool DecisionConfig::has_escape() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DecisionConfig::set_has_escape() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DecisionConfig::clear_has_escape() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DecisionConfig::clear_escape() {
  if (escape_ != NULL) escape_->::RTS_DECISION::EscapeConstraint::Clear();
  clear_has_escape();
}
inline const ::RTS_DECISION::EscapeConstraint& DecisionConfig::escape() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.escape)
  return escape_ != NULL ? *escape_ : *default_instance_->escape_;
}
inline ::RTS_DECISION::EscapeConstraint* DecisionConfig::mutable_escape() {
  set_has_escape();
  if (escape_ == NULL) escape_ = new ::RTS_DECISION::EscapeConstraint;
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.escape)
  return escape_;
}
inline ::RTS_DECISION::EscapeConstraint* DecisionConfig::release_escape() {
  clear_has_escape();
  ::RTS_DECISION::EscapeConstraint* temp = escape_;
  escape_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_escape(::RTS_DECISION::EscapeConstraint* escape) {
  delete escape_;
  escape_ = escape;
  if (escape) {
    set_has_escape();
  } else {
    clear_has_escape();
  }
  // @@protoc_insertion_point(field_set_allocated:RTS_DECISION.DecisionConfig.escape)
}

// repeated .RTS_DECISION.Point buff_point = 5;
inline int DecisionConfig::buff_point_size() const {
  return buff_point_.size();
}
inline void DecisionConfig::clear_buff_point() {
  buff_point_.Clear();
}
inline const ::RTS_DECISION::Point& DecisionConfig::buff_point(int index) const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.buff_point)
  return buff_point_.Get(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::mutable_buff_point(int index) {
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.buff_point)
  return buff_point_.Mutable(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::add_buff_point() {
  // @@protoc_insertion_point(field_add:RTS_DECISION.DecisionConfig.buff_point)
  return buff_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
DecisionConfig::buff_point() const {
  // @@protoc_insertion_point(field_list:RTS_DECISION.DecisionConfig.buff_point)
  return buff_point_;
}
inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
DecisionConfig::mutable_buff_point() {
  // @@protoc_insertion_point(field_mutable_list:RTS_DECISION.DecisionConfig.buff_point)
  return &buff_point_;
}

// optional .RTS_DECISION.SearchConstraint search_limit = 6;
inline bool DecisionConfig::has_search_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DecisionConfig::set_has_search_limit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DecisionConfig::clear_has_search_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DecisionConfig::clear_search_limit() {
  if (search_limit_ != NULL) search_limit_->::RTS_DECISION::SearchConstraint::Clear();
  clear_has_search_limit();
}
inline const ::RTS_DECISION::SearchConstraint& DecisionConfig::search_limit() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.search_limit)
  return search_limit_ != NULL ? *search_limit_ : *default_instance_->search_limit_;
}
inline ::RTS_DECISION::SearchConstraint* DecisionConfig::mutable_search_limit() {
  set_has_search_limit();
  if (search_limit_ == NULL) search_limit_ = new ::RTS_DECISION::SearchConstraint;
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.search_limit)
  return search_limit_;
}
inline ::RTS_DECISION::SearchConstraint* DecisionConfig::release_search_limit() {
  clear_has_search_limit();
  ::RTS_DECISION::SearchConstraint* temp = search_limit_;
  search_limit_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_search_limit(::RTS_DECISION::SearchConstraint* search_limit) {
  delete search_limit_;
  search_limit_ = search_limit;
  if (search_limit) {
    set_has_search_limit();
  } else {
    clear_has_search_limit();
  }
  // @@protoc_insertion_point(field_set_allocated:RTS_DECISION.DecisionConfig.search_limit)
}

// optional .RTS_DECISION.WhirlVel whirl_vel = 7;
inline bool DecisionConfig::has_whirl_vel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DecisionConfig::set_has_whirl_vel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DecisionConfig::clear_has_whirl_vel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DecisionConfig::clear_whirl_vel() {
  if (whirl_vel_ != NULL) whirl_vel_->::RTS_DECISION::WhirlVel::Clear();
  clear_has_whirl_vel();
}
inline const ::RTS_DECISION::WhirlVel& DecisionConfig::whirl_vel() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.whirl_vel)
  return whirl_vel_ != NULL ? *whirl_vel_ : *default_instance_->whirl_vel_;
}
inline ::RTS_DECISION::WhirlVel* DecisionConfig::mutable_whirl_vel() {
  set_has_whirl_vel();
  if (whirl_vel_ == NULL) whirl_vel_ = new ::RTS_DECISION::WhirlVel;
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.whirl_vel)
  return whirl_vel_;
}
inline ::RTS_DECISION::WhirlVel* DecisionConfig::release_whirl_vel() {
  clear_has_whirl_vel();
  ::RTS_DECISION::WhirlVel* temp = whirl_vel_;
  whirl_vel_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_whirl_vel(::RTS_DECISION::WhirlVel* whirl_vel) {
  delete whirl_vel_;
  whirl_vel_ = whirl_vel;
  if (whirl_vel) {
    set_has_whirl_vel();
  } else {
    clear_has_whirl_vel();
  }
  // @@protoc_insertion_point(field_set_allocated:RTS_DECISION.DecisionConfig.whirl_vel)
}

// optional .RTS_DECISION.MultiRobot wing_bot = 8;
inline bool DecisionConfig::has_wing_bot() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DecisionConfig::set_has_wing_bot() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DecisionConfig::clear_has_wing_bot() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DecisionConfig::clear_wing_bot() {
  if (wing_bot_ != NULL) wing_bot_->::RTS_DECISION::MultiRobot::Clear();
  clear_has_wing_bot();
}
inline const ::RTS_DECISION::MultiRobot& DecisionConfig::wing_bot() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.wing_bot)
  return wing_bot_ != NULL ? *wing_bot_ : *default_instance_->wing_bot_;
}
inline ::RTS_DECISION::MultiRobot* DecisionConfig::mutable_wing_bot() {
  set_has_wing_bot();
  if (wing_bot_ == NULL) wing_bot_ = new ::RTS_DECISION::MultiRobot;
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.wing_bot)
  return wing_bot_;
}
inline ::RTS_DECISION::MultiRobot* DecisionConfig::release_wing_bot() {
  clear_has_wing_bot();
  ::RTS_DECISION::MultiRobot* temp = wing_bot_;
  wing_bot_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_wing_bot(::RTS_DECISION::MultiRobot* wing_bot) {
  delete wing_bot_;
  wing_bot_ = wing_bot;
  if (wing_bot) {
    set_has_wing_bot();
  } else {
    clear_has_wing_bot();
  }
  // @@protoc_insertion_point(field_set_allocated:RTS_DECISION.DecisionConfig.wing_bot)
}

// optional .RTS_DECISION.MultiRobot master_bot = 9;
inline bool DecisionConfig::has_master_bot() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DecisionConfig::set_has_master_bot() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DecisionConfig::clear_has_master_bot() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DecisionConfig::clear_master_bot() {
  if (master_bot_ != NULL) master_bot_->::RTS_DECISION::MultiRobot::Clear();
  clear_has_master_bot();
}
inline const ::RTS_DECISION::MultiRobot& DecisionConfig::master_bot() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.master_bot)
  return master_bot_ != NULL ? *master_bot_ : *default_instance_->master_bot_;
}
inline ::RTS_DECISION::MultiRobot* DecisionConfig::mutable_master_bot() {
  set_has_master_bot();
  if (master_bot_ == NULL) master_bot_ = new ::RTS_DECISION::MultiRobot;
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.master_bot)
  return master_bot_;
}
inline ::RTS_DECISION::MultiRobot* DecisionConfig::release_master_bot() {
  clear_has_master_bot();
  ::RTS_DECISION::MultiRobot* temp = master_bot_;
  master_bot_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_master_bot(::RTS_DECISION::MultiRobot* master_bot) {
  delete master_bot_;
  master_bot_ = master_bot;
  if (master_bot) {
    set_has_master_bot();
  } else {
    clear_has_master_bot();
  }
  // @@protoc_insertion_point(field_set_allocated:RTS_DECISION.DecisionConfig.master_bot)
}

// optional .RTS_DECISION.Point wing_bot_task_point = 10;
inline bool DecisionConfig::has_wing_bot_task_point() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DecisionConfig::set_has_wing_bot_task_point() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DecisionConfig::clear_has_wing_bot_task_point() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DecisionConfig::clear_wing_bot_task_point() {
  if (wing_bot_task_point_ != NULL) wing_bot_task_point_->::RTS_DECISION::Point::Clear();
  clear_has_wing_bot_task_point();
}
inline const ::RTS_DECISION::Point& DecisionConfig::wing_bot_task_point() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.wing_bot_task_point)
  return wing_bot_task_point_ != NULL ? *wing_bot_task_point_ : *default_instance_->wing_bot_task_point_;
}
inline ::RTS_DECISION::Point* DecisionConfig::mutable_wing_bot_task_point() {
  set_has_wing_bot_task_point();
  if (wing_bot_task_point_ == NULL) wing_bot_task_point_ = new ::RTS_DECISION::Point;
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.wing_bot_task_point)
  return wing_bot_task_point_;
}
inline ::RTS_DECISION::Point* DecisionConfig::release_wing_bot_task_point() {
  clear_has_wing_bot_task_point();
  ::RTS_DECISION::Point* temp = wing_bot_task_point_;
  wing_bot_task_point_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_wing_bot_task_point(::RTS_DECISION::Point* wing_bot_task_point) {
  delete wing_bot_task_point_;
  wing_bot_task_point_ = wing_bot_task_point;
  if (wing_bot_task_point) {
    set_has_wing_bot_task_point();
  } else {
    clear_has_wing_bot_task_point();
  }
  // @@protoc_insertion_point(field_set_allocated:RTS_DECISION.DecisionConfig.wing_bot_task_point)
}

// repeated .RTS_DECISION.Point search_region_1 = 11;
inline int DecisionConfig::search_region_1_size() const {
  return search_region_1_.size();
}
inline void DecisionConfig::clear_search_region_1() {
  search_region_1_.Clear();
}
inline const ::RTS_DECISION::Point& DecisionConfig::search_region_1(int index) const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.search_region_1)
  return search_region_1_.Get(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::mutable_search_region_1(int index) {
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.search_region_1)
  return search_region_1_.Mutable(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::add_search_region_1() {
  // @@protoc_insertion_point(field_add:RTS_DECISION.DecisionConfig.search_region_1)
  return search_region_1_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
DecisionConfig::search_region_1() const {
  // @@protoc_insertion_point(field_list:RTS_DECISION.DecisionConfig.search_region_1)
  return search_region_1_;
}
inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
DecisionConfig::mutable_search_region_1() {
  // @@protoc_insertion_point(field_mutable_list:RTS_DECISION.DecisionConfig.search_region_1)
  return &search_region_1_;
}

// repeated .RTS_DECISION.Point search_region_2 = 12;
inline int DecisionConfig::search_region_2_size() const {
  return search_region_2_.size();
}
inline void DecisionConfig::clear_search_region_2() {
  search_region_2_.Clear();
}
inline const ::RTS_DECISION::Point& DecisionConfig::search_region_2(int index) const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.search_region_2)
  return search_region_2_.Get(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::mutable_search_region_2(int index) {
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.search_region_2)
  return search_region_2_.Mutable(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::add_search_region_2() {
  // @@protoc_insertion_point(field_add:RTS_DECISION.DecisionConfig.search_region_2)
  return search_region_2_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
DecisionConfig::search_region_2() const {
  // @@protoc_insertion_point(field_list:RTS_DECISION.DecisionConfig.search_region_2)
  return search_region_2_;
}
inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
DecisionConfig::mutable_search_region_2() {
  // @@protoc_insertion_point(field_mutable_list:RTS_DECISION.DecisionConfig.search_region_2)
  return &search_region_2_;
}

// repeated .RTS_DECISION.Point search_region_3 = 13;
inline int DecisionConfig::search_region_3_size() const {
  return search_region_3_.size();
}
inline void DecisionConfig::clear_search_region_3() {
  search_region_3_.Clear();
}
inline const ::RTS_DECISION::Point& DecisionConfig::search_region_3(int index) const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.search_region_3)
  return search_region_3_.Get(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::mutable_search_region_3(int index) {
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.search_region_3)
  return search_region_3_.Mutable(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::add_search_region_3() {
  // @@protoc_insertion_point(field_add:RTS_DECISION.DecisionConfig.search_region_3)
  return search_region_3_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
DecisionConfig::search_region_3() const {
  // @@protoc_insertion_point(field_list:RTS_DECISION.DecisionConfig.search_region_3)
  return search_region_3_;
}
inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
DecisionConfig::mutable_search_region_3() {
  // @@protoc_insertion_point(field_mutable_list:RTS_DECISION.DecisionConfig.search_region_3)
  return &search_region_3_;
}

// repeated .RTS_DECISION.Point search_region_4 = 14;
inline int DecisionConfig::search_region_4_size() const {
  return search_region_4_.size();
}
inline void DecisionConfig::clear_search_region_4() {
  search_region_4_.Clear();
}
inline const ::RTS_DECISION::Point& DecisionConfig::search_region_4(int index) const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.search_region_4)
  return search_region_4_.Get(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::mutable_search_region_4(int index) {
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.search_region_4)
  return search_region_4_.Mutable(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::add_search_region_4() {
  // @@protoc_insertion_point(field_add:RTS_DECISION.DecisionConfig.search_region_4)
  return search_region_4_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
DecisionConfig::search_region_4() const {
  // @@protoc_insertion_point(field_list:RTS_DECISION.DecisionConfig.search_region_4)
  return search_region_4_;
}
inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
DecisionConfig::mutable_search_region_4() {
  // @@protoc_insertion_point(field_mutable_list:RTS_DECISION.DecisionConfig.search_region_4)
  return &search_region_4_;
}

// repeated .RTS_DECISION.Point patrol_region = 15;
inline int DecisionConfig::patrol_region_size() const {
  return patrol_region_.size();
}
inline void DecisionConfig::clear_patrol_region() {
  patrol_region_.Clear();
}
inline const ::RTS_DECISION::Point& DecisionConfig::patrol_region(int index) const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.patrol_region)
  return patrol_region_.Get(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::mutable_patrol_region(int index) {
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.patrol_region)
  return patrol_region_.Mutable(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::add_patrol_region() {
  // @@protoc_insertion_point(field_add:RTS_DECISION.DecisionConfig.patrol_region)
  return patrol_region_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
DecisionConfig::patrol_region() const {
  // @@protoc_insertion_point(field_list:RTS_DECISION.DecisionConfig.patrol_region)
  return patrol_region_;
}
inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
DecisionConfig::mutable_patrol_region() {
  // @@protoc_insertion_point(field_mutable_list:RTS_DECISION.DecisionConfig.patrol_region)
  return &patrol_region_;
}

// optional .RTS_DECISION.ShooterModelConfig shooter_model_config = 16;
inline bool DecisionConfig::has_shooter_model_config() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DecisionConfig::set_has_shooter_model_config() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DecisionConfig::clear_has_shooter_model_config() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DecisionConfig::clear_shooter_model_config() {
  if (shooter_model_config_ != NULL) shooter_model_config_->::RTS_DECISION::ShooterModelConfig::Clear();
  clear_has_shooter_model_config();
}
inline const ::RTS_DECISION::ShooterModelConfig& DecisionConfig::shooter_model_config() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.shooter_model_config)
  return shooter_model_config_ != NULL ? *shooter_model_config_ : *default_instance_->shooter_model_config_;
}
inline ::RTS_DECISION::ShooterModelConfig* DecisionConfig::mutable_shooter_model_config() {
  set_has_shooter_model_config();
  if (shooter_model_config_ == NULL) shooter_model_config_ = new ::RTS_DECISION::ShooterModelConfig;
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.shooter_model_config)
  return shooter_model_config_;
}
inline ::RTS_DECISION::ShooterModelConfig* DecisionConfig::release_shooter_model_config() {
  clear_has_shooter_model_config();
  ::RTS_DECISION::ShooterModelConfig* temp = shooter_model_config_;
  shooter_model_config_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_shooter_model_config(::RTS_DECISION::ShooterModelConfig* shooter_model_config) {
  delete shooter_model_config_;
  shooter_model_config_ = shooter_model_config;
  if (shooter_model_config) {
    set_has_shooter_model_config();
  } else {
    clear_has_shooter_model_config();
  }
  // @@protoc_insertion_point(field_set_allocated:RTS_DECISION.DecisionConfig.shooter_model_config)
}

// optional int32 robot_id = 17;
inline bool DecisionConfig::has_robot_id() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DecisionConfig::set_has_robot_id() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DecisionConfig::clear_has_robot_id() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DecisionConfig::clear_robot_id() {
  robot_id_ = 0;
  clear_has_robot_id();
}
inline ::google::protobuf::int32 DecisionConfig::robot_id() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.robot_id)
  return robot_id_;
}
inline void DecisionConfig::set_robot_id(::google::protobuf::int32 value) {
  set_has_robot_id();
  robot_id_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.DecisionConfig.robot_id)
}

// repeated .RTS_DECISION.Point buff_adjust_point = 18;
inline int DecisionConfig::buff_adjust_point_size() const {
  return buff_adjust_point_.size();
}
inline void DecisionConfig::clear_buff_adjust_point() {
  buff_adjust_point_.Clear();
}
inline const ::RTS_DECISION::Point& DecisionConfig::buff_adjust_point(int index) const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.buff_adjust_point)
  return buff_adjust_point_.Get(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::mutable_buff_adjust_point(int index) {
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.buff_adjust_point)
  return buff_adjust_point_.Mutable(index);
}
inline ::RTS_DECISION::Point* DecisionConfig::add_buff_adjust_point() {
  // @@protoc_insertion_point(field_add:RTS_DECISION.DecisionConfig.buff_adjust_point)
  return buff_adjust_point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >&
DecisionConfig::buff_adjust_point() const {
  // @@protoc_insertion_point(field_list:RTS_DECISION.DecisionConfig.buff_adjust_point)
  return buff_adjust_point_;
}
inline ::google::protobuf::RepeatedPtrField< ::RTS_DECISION::Point >*
DecisionConfig::mutable_buff_adjust_point() {
  // @@protoc_insertion_point(field_mutable_list:RTS_DECISION.DecisionConfig.buff_adjust_point)
  return &buff_adjust_point_;
}

// optional .RTS_DECISION.DetectionShootConfig detection_shoot_config = 19;
inline bool DecisionConfig::has_detection_shoot_config() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DecisionConfig::set_has_detection_shoot_config() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DecisionConfig::clear_has_detection_shoot_config() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DecisionConfig::clear_detection_shoot_config() {
  if (detection_shoot_config_ != NULL) detection_shoot_config_->::RTS_DECISION::DetectionShootConfig::Clear();
  clear_has_detection_shoot_config();
}
inline const ::RTS_DECISION::DetectionShootConfig& DecisionConfig::detection_shoot_config() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.detection_shoot_config)
  return detection_shoot_config_ != NULL ? *detection_shoot_config_ : *default_instance_->detection_shoot_config_;
}
inline ::RTS_DECISION::DetectionShootConfig* DecisionConfig::mutable_detection_shoot_config() {
  set_has_detection_shoot_config();
  if (detection_shoot_config_ == NULL) detection_shoot_config_ = new ::RTS_DECISION::DetectionShootConfig;
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.detection_shoot_config)
  return detection_shoot_config_;
}
inline ::RTS_DECISION::DetectionShootConfig* DecisionConfig::release_detection_shoot_config() {
  clear_has_detection_shoot_config();
  ::RTS_DECISION::DetectionShootConfig* temp = detection_shoot_config_;
  detection_shoot_config_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_detection_shoot_config(::RTS_DECISION::DetectionShootConfig* detection_shoot_config) {
  delete detection_shoot_config_;
  detection_shoot_config_ = detection_shoot_config;
  if (detection_shoot_config) {
    set_has_detection_shoot_config();
  } else {
    clear_has_detection_shoot_config();
  }
  // @@protoc_insertion_point(field_set_allocated:RTS_DECISION.DecisionConfig.detection_shoot_config)
}

// optional .RTS_DECISION.CameraGimbalTransform camera_gimbal_transform = 20;
inline bool DecisionConfig::has_camera_gimbal_transform() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DecisionConfig::set_has_camera_gimbal_transform() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DecisionConfig::clear_has_camera_gimbal_transform() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DecisionConfig::clear_camera_gimbal_transform() {
  if (camera_gimbal_transform_ != NULL) camera_gimbal_transform_->::RTS_DECISION::CameraGimbalTransform::Clear();
  clear_has_camera_gimbal_transform();
}
inline const ::RTS_DECISION::CameraGimbalTransform& DecisionConfig::camera_gimbal_transform() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.camera_gimbal_transform)
  return camera_gimbal_transform_ != NULL ? *camera_gimbal_transform_ : *default_instance_->camera_gimbal_transform_;
}
inline ::RTS_DECISION::CameraGimbalTransform* DecisionConfig::mutable_camera_gimbal_transform() {
  set_has_camera_gimbal_transform();
  if (camera_gimbal_transform_ == NULL) camera_gimbal_transform_ = new ::RTS_DECISION::CameraGimbalTransform;
  // @@protoc_insertion_point(field_mutable:RTS_DECISION.DecisionConfig.camera_gimbal_transform)
  return camera_gimbal_transform_;
}
inline ::RTS_DECISION::CameraGimbalTransform* DecisionConfig::release_camera_gimbal_transform() {
  clear_has_camera_gimbal_transform();
  ::RTS_DECISION::CameraGimbalTransform* temp = camera_gimbal_transform_;
  camera_gimbal_transform_ = NULL;
  return temp;
}
inline void DecisionConfig::set_allocated_camera_gimbal_transform(::RTS_DECISION::CameraGimbalTransform* camera_gimbal_transform) {
  delete camera_gimbal_transform_;
  camera_gimbal_transform_ = camera_gimbal_transform;
  if (camera_gimbal_transform) {
    set_has_camera_gimbal_transform();
  } else {
    clear_has_camera_gimbal_transform();
  }
  // @@protoc_insertion_point(field_set_allocated:RTS_DECISION.DecisionConfig.camera_gimbal_transform)
}

// optional bool use_pid = 21;
inline bool DecisionConfig::has_use_pid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DecisionConfig::set_has_use_pid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DecisionConfig::clear_has_use_pid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DecisionConfig::clear_use_pid() {
  use_pid_ = false;
  clear_has_use_pid();
}
inline bool DecisionConfig::use_pid() const {
  // @@protoc_insertion_point(field_get:RTS_DECISION.DecisionConfig.use_pid)
  return use_pid_;
}
inline void DecisionConfig::set_use_pid(bool value) {
  set_has_use_pid();
  use_pid_ = value;
  // @@protoc_insertion_point(field_set:RTS_DECISION.DecisionConfig.use_pid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RTS_DECISION

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_decision_2eproto__INCLUDED
